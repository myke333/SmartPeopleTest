using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using OpenQA.Selenium.Chrome;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using System.Data;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.IO;
using System.Management;
using System.Diagnostics;


namespace Web_Kactus_Test
{
    /// <summary>
    /// Descripción resumida de SmartPeople_NTC_1
    /// </summary>
    [CodedUITest]
    public class SmartPeople_NTC_1 : FuncionesVitales
    {

        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public SmartPeople_NTC_1()
        {
        }

        [TestCleanup]
        public void Limpiar()
        {
            //Playback.PlaybackSettings.LoggerOverrideState = HtmlLoggerState.Disabled;

            DirectoryInfo di = new DirectoryInfo(TestContext.TestLogsDir);
            DirectoryInfo di1 = new DirectoryInfo(TestContext.TestRunResultsDirectory);
            DirectoryInfo di2 = new DirectoryInfo(TestContext.ResultsDirectory);

            int numfiles = di.GetFiles("*.png", SearchOption.AllDirectories).Length;
            int numfiles1 = di1.GetFiles("*.png", SearchOption.AllDirectories).Length;
            int numfiles2 = di2.GetFiles("*.png", SearchOption.AllDirectories).Length;

            if (numfiles > 0)
            {
                foreach (FileInfo file in di.GetFiles("*.png", SearchOption.AllDirectories))
                {
                    file.Delete();
                }
            }

            if (numfiles1 > 0)
            {
                foreach (FileInfo file1 in di1.GetFiles("*.png", SearchOption.AllDirectories))
                {
                    file1.Delete();
                }
            }

            if (numfiles2 > 0)
            {
                foreach (FileInfo file2 in di2.GetFiles("*.png", SearchOption.AllDirectories))
                {
                    file2.Delete();
                }
            }
            string Machine = Environment.MachineName;
            string wmiQuery = string.Format("SELECT Name, ProcessID  FROM Win32_Process WHERE (Name LIKE '{0}%{1}') OR (Name LIKE '{2}%{3}')", "CHROME", ".exe", "chrome", ".exe");
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmiQuery);
            ManagementObjectCollection retObjectCollection = searcher.Get();
            foreach (ManagementObject retObject in retObjectCollection)
            {
                try
                {
                    int ID = Convert.ToInt32(retObject["ProcessID"]);
                    Process processes = Process.GetProcessById(ID, Machine);
                    processes.Kill();
                }
                catch
                {
                    break;
                }
            }
            string wmiQuery1 = string.Format("SELECT Name, ProcessID  FROM Win32_Process WHERE (Name LIKE '{0}%{1}') OR (Name LIKE '{2}%{3}')", "CHROMEDRIVER", ".exe", "chromedriver", ".exe");
            ManagementObjectSearcher searcher1 = new ManagementObjectSearcher(wmiQuery1);
            ManagementObjectCollection retObjectCollection1 = searcher1.Get();
            foreach (ManagementObject retObject1 in retObjectCollection1)
            {
                try
                {
                    int ID = Convert.ToInt32(retObject1["ProcessID"]);
                    Process processes1 = Process.GetProcessById(ID, Machine);
                    processes1.Kill();
                }
                catch
                {
                    break;
                }
            }
            //Playback.Cleanup();
        }


        [TestMethod]
        public void SmartPeople_CambiosManualFuncionesNTC()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_CambiosManualFuncionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["CodigoCargoEsp"].ToString().Length != 0 && rows["CodigoCargoEsp"].ToString() != null &&
                                rows["NombreCargoEsp"].ToString().Length != 0 && rows["NombreCargoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string CodigoCargoEsp = rows["CodigoCargoEsp"].ToString();
                                string NombreCargoEsp = rows["NombreCargoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Login Empleado", true, file);


                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambios Manual de Funciones", true, file);



                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Código Cargo", true, file);


                                    Thread.Sleep(100);
                                    string CodigoCargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(100);
                                    if (CodigoCargo != CodigoCargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodigoCargoEsp + " y el encontrado es: " + CodigoCargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCargo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Nombre Cargo", true, file);


                                    Thread.Sleep(100);
                                    string NombreCargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCargo')]");
                                    Thread.Sleep(100);
                                    if (NombreCargo != NombreCargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreCargoEsp + " y el encontrado es: " + NombreCargo);
                                    }

                                    //////// Validacion de TABS //////////////                                    
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCodCarg')]");
                                    selenium.Screenshot("TAB", true, file);


                                    Thread.Sleep(500);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);


                                        Thread.Sleep(100);
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ManualFuncionesAprobadosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ManualFuncionesAprobadosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambios Manual de Funciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteManualFuncionesRH_NTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ReporteManualFuncionesRH_NTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reporte Manual Funciones RH", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteManualdeFuncionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ReporteManualdeFuncionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsultarDefinicionEsp"].ToString().Length != 0 && rows["ConsultarDefinicionEsp"].ToString() != null &&
                                rows["ConsultarNombresEsp"].ToString().Length != 0 && rows["ConsultarNombresEsp"].ToString() != null &&
                                rows["ConsultarApellidosEsp"].ToString().Length != 0 && rows["ConsultarApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsultarDefinicionEsp = rows["ConsultarDefinicionEsp"].ToString();
                                string ConsultarNombresEsp = rows["ConsultarNombresEsp"].ToString();
                                string ConsultarApellidosEsp = rows["ConsultarApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);


                                    selenium.Screenshot("Login Empleado", true, file);



                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Cerrar Error", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Manual de Funciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Definición", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarDefinicion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarDefinicion != ConsultarDefinicionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarDefinicionEsp + " y el encontrado es: " + ConsultarDefinicion);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarNombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarNombres != ConsultarNombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNombresEsp + " y el encontrado es: " + ConsultarNombres);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarApellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarApellidos != ConsultarApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApellidosEsp + " y el encontrado es: " + ConsultarApellidos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ModuloAutorizacionTransferenciasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ModuloAutorizacionTransferenciasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Módulo Autorización de Transferencias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ModuloBeneficioEducativoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ModuloBeneficioEducativoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["CargarEsp"].ToString().Length != 0 && rows["CargarEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string CargarEsp = rows["CargarEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Módulo Beneficio Educativo", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Nuevo es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Cargar
                                    string Cargar = selenium.EmergenteBotones("ctl00_btnCargar");
                                    Thread.Sleep(100);
                                    if (Cargar != CargarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Cargar es incorrecto, el esperado es: " + CargarEsp + " y el encontrado es: " + Cargar);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(500);
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmBeSolicComiteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmBeSolicComiteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null &&
                                rows["InstitucionEsp"].ToString().Length != 0 && rows["InstitucionEsp"].ToString() != null &&
                                rows["MotivoComiteEsp"].ToString().Length != 0 && rows["MotivoComiteEsp"].ToString() != null &&
                                rows["ObservacionesEsp"].ToString().Length != 0 && rows["ObservacionesEsp"].ToString() != null &&
                                rows["AdjuntarEsp"].ToString().Length != 0 && rows["AdjuntarEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string GradoEsp = rows["GradoEsp"].ToString();
                                string InstitucionEsp = rows["InstitucionEsp"].ToString();
                                string MotivoComiteEsp = rows["MotivoComiteEsp"].ToString();
                                string ObservacionesEsp = rows["ObservacionesEsp"].ToString();
                                string AdjuntarEsp = rows["AdjuntarEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Módulo Beneficio Educativo", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Nuevo es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Cargar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrae')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grado", true, file);

                                    Thread.Sleep(100);
                                    string Grado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrae')]");
                                    Thread.Sleep(100);
                                    if (Grado != GradoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GradoEsp + " y el encontrado es: " + Grado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodIned')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Institución", true, file);

                                    Thread.Sleep(100);
                                    string Institucion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodIned')]");
                                    Thread.Sleep(100);
                                    if (Institucion != InstitucionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InstitucionEsp + " y el encontrado es: " + Institucion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMotComi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo Comité", true, file);

                                    Thread.Sleep(100);
                                    string MotivoComite = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMotComi')]");
                                    Thread.Sleep(100);
                                    if (MotivoComite != MotivoComiteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoComiteEsp + " y el encontrado es: " + MotivoComite);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblObserva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observaciones = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblObserva')]");
                                    Thread.Sleep(100);
                                    if (Observaciones != ObservacionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservacionesEsp + " y el encontrado es: " + Observaciones);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjDocu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Adjuntar Documento", true, file);

                                    Thread.Sleep(100);
                                    string Adjuntar = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjDocu')]");
                                    Thread.Sleep(100);
                                    if (Adjuntar != AdjuntarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AdjuntarEsp + " y el encontrado es: " + Adjuntar);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmAsNmInhexNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmAsNmInhexNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["EmpleadoEsp"].ToString().Length != 0 && rows["EmpleadoEsp"].ToString() != null &&
                                rows["NoContratoEsp"].ToString().Length != 0 && rows["NoContratoEsp"].ToString() != null &&
                                rows["HoraInicioEsp"].ToString().Length != 0 && rows["HoraInicioEsp"].ToString() != null &&
                                rows["MinutosInicioEsp"].ToString().Length != 0 && rows["MinutosInicioEsp"].ToString() != null &&
                                rows["HoraFinalEsp"].ToString().Length != 0 && rows["HoraFinalEsp"].ToString() != null &&
                                rows["MinutosFinalEsp"].ToString().Length != 0 && rows["MinutosFinalEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string EmpleadoEsp = rows["EmpleadoEsp"].ToString();
                                string NoContratoEsp = rows["NoContratoEsp"].ToString();
                                string HoraInicioEsp = rows["HoraInicioEsp"].ToString();
                                string MinutosInicioEsp = rows["MinutosInicioEsp"].ToString();
                                string HoraFinalEsp = rows["HoraFinalEsp"].ToString();
                                string MinutosFinalEsp = rows["MinutosFinalEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Horas Extra", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_EMPL')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empleado", true, file);

                                    Thread.Sleep(100);
                                    string Empleado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_EMPL')]");
                                    Thread.Sleep(100);
                                    if (Empleado != EmpleadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpleadoEsp + " y el encontrado es: " + Empleado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNRO_CONT')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Número de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NoContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNRO_CONT')]");
                                    Thread.Sleep(100);
                                    if (NoContrato != NoContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NoContratoEsp + " y el encontrado es: " + NoContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblHorInic')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Inicio", true, file);

                                    Thread.Sleep(100);
                                    string HoraInicio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblHorInic')]");
                                    Thread.Sleep(100);
                                    if (HoraInicio != HoraInicioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraInicioEsp + " y el encontrado es: " + HoraInicio);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMinutosInicio')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Minutos Inicio", true, file);

                                    Thread.Sleep(100);
                                    string MinutosInicio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMinutosInicio')]");
                                    Thread.Sleep(100);
                                    if (MinutosInicio != MinutosInicioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MinutosInicioEsp + " y el encontrado es: " + MinutosInicio);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblHorFina')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Final", true, file);

                                    Thread.Sleep(100);
                                    string HoraFinal = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblHorFina')]");
                                    Thread.Sleep(100);
                                    if (HoraFinal != HoraFinalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinalEsp + " y el encontrado es: " + HoraFinal);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMinutosFinal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Minutos Final", true, file);

                                    Thread.Sleep(100);
                                    string MinutosFinal = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMinutosFinal')]");
                                    Thread.Sleep(100);
                                    if (MinutosFinal != MinutosFinalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MinutosFinalEsp + " y el encontrado es: " + MinutosFinal);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
                                    for (int i = 0; i < 15; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmAsNmInhexLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmAsNmInhexLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Horas Extra", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        //[TestMethod]
        //public void SmartPeople_frmAcropueNTC()
        //{
        //    List<string> errorMessages = new List<string>();
        //    List<string> errorMessagesMetodo = new List<string>();
        //    bool bandera = false;
        //    string enviroment = (Environment.MachineName);
        //    string[] auxtable = enviroment.Split('-');
        //    string TableOrder = "";
        //    if (auxtable.Length > 1)
        //    {
        //        TableOrder = (enviroment.Replace("-", "_")).ToUpper();
        //    }
        //    else
        //    {
        //        TableOrder = enviroment.ToUpper();
        //    }
        //    //TableOrder = "ktes1";

        //    DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
        //    int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
        //    if (NumCasAgen < 1)
        //    {
        //        errorMessages.Add("No hay casos en el agendamiento");
        //    }
        //    foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
        //    {
        //        string plans = rowsi["plans"].ToString();
        //        string suite = rowsi["suite"].ToString();
        //        string CaseId = rowsi["CaseId"].ToString();
        //        string orders = rowsi["orders"].ToString();
        //        string states = rowsi["states"].ToString();
        //        string methodname = rowsi["methodname"].ToString();
        //        string CountDes = rowsi["CountDes"].ToString();

        //        if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmAsNmInhexNTC")
        //        {
        //            DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
        //            string endstatus = null;
        //            foreach (DataRow rowsta in sta.Tables[0].Rows)
        //            {
        //                endstatus = rowsta["states"].ToString();
        //            }
        //            if (endstatus == "True")
        //            {

        //                TFSData GetCasen = new TFSData(CaseId);
        //                DataSet DataCase = GetCasen.GetParams();

        //                foreach (DataRow rows in DataCase.Tables[0].Rows)
        //                {
        //                    int velocidad = 10;

        //                    //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

        //                    if (
        //                        //Datos Login
        //                        rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
        //                        rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
        //                        rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
        //                        rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
        //                        //Variables
        //                        rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
        //                        rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
        //                        rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
        //                        rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
        //                        rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
        //                        rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
        //                        )
        //                    {
        //                        //LOGIN
        //                        string EmpleadoUser = rows["EmpleadoUser"].ToString();
        //                        string EmpleadoPass = rows["EmpleadoPass"].ToString();
        //                        string url = rows["url"].ToString();
        //                        string url2 = rows["url2"].ToString();
        //                        //Variables
        //                        string TituloEsp = rows["TituloEsp"].ToString();
        //                        string SubtituloEsp = rows["SubtituloEsp"].ToString();
        //                        string HomeEsp = rows["HomeEsp"].ToString();
        //                        string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
        //                        string NombresEsp = rows["NombresEsp"].ToString();
        //                        string ApellidosEsp = rows["ApellidosEsp"].ToString();

        //                        try
        //                        {
        //                            string database = "";
        //                            if (url.ToLower().Contains("ora"))
        //                            {
        //                                database = "ORA";
        //                            }
        //                            else
        //                            {
        //                                database = "SQL";
        //                            }
        //                            string[] split = methodname.Split('.');
        //                            string nombre = split[2];

        //                            string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


        //                            //Login Empleado
        //                            selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
        //                            Thread.Sleep(2000);
        //                            selenium.Screenshot("Login Empleado", true, file);

        //                            Thread.Sleep(1000);

        //                            ChromeDriver driver = selenium.returnDriver();
        //                            driver.Navigate().GoToUrl(url2);
        //                            Thread.Sleep(2000);

        //                            selenium.Click("//a[contains(.,'Cerrar')]");
        //                            Thread.Sleep(2000);

        //                            selenium.Screenshot("Registro de Horas Extra", true, file);


        //                            // Validacion titulo
        //                            string Titulo = selenium.Title();
        //                            Thread.Sleep(100);
        //                            if (Titulo != TituloEsp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
        //                            }
        //                            Thread.Sleep(100);

        //                            //Validación subtitulo botones
        //                            string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
        //                            Thread.Sleep(100);
        //                            if (Subtitulo != SubtituloEsp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
        //                            }
        //                            Thread.Sleep(100);

        //                            //Validación emergentes Boton Home
        //                            string Home = selenium.EmergenteBotones("ctl00_btnHome");
        //                            Thread.Sleep(100);
        //                            if (Home != HomeEsp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//header[contains(.,' Gestionar Puesto')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Click("//div[@id='ctl00_pBotones']/div");
        //                            for(int i = 0; i < 9; i++)
        //                            {
        //                                Keyboard.SendKeys("{DOWN}");
        //                            }

        //                            //Validación Emergentes campos
        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_lblTelResi')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Identificación 1", true, file);

        //                            Thread.Sleep(100);
        //                            string Identificacion1 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_lblTelResi')]");
        //                            Thread.Sleep(100);
        //                            if (Identificacion1 != Identificacion1Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Identificacion1Esp + " y el encontrado es: " + Identificacion1);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//div[@id='ctl00_pBotones']/div");
        //                            Thread.Sleep(500);
        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label1')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Nombres 1", true, file);

        //                            Thread.Sleep(100);
        //                            string Nombres1 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label1')]");
        //                            Thread.Sleep(100);
        //                            if (Nombres1 != Nombres1Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Nombres1Esp + " y el encontrado es: " + Nombres1);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_txtApe_empl')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Apellidos 1", true, file);

        //                            Thread.Sleep(100);
        //                            string Apellidos1 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_txtApe_empl')]");
        //                            Thread.Sleep(100);
        //                            if (Apellidos1 != Apellidos1Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Apellidos1Esp + " y el encontrado es: " + Apellidos1);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label2')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Identificación 2", true, file);

        //                            Thread.Sleep(100);
        //                            string Identificacion2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label2')]");
        //                            Thread.Sleep(100);
        //                            if (Identificacion2 != Identificacion2Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Identificacion2Esp + " y el encontrado es: " + Identificacion2);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label3')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Nombres 2", true, file);

        //                            Thread.Sleep(100);
        //                            string Nombres2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label3')]");
        //                            Thread.Sleep(100);
        //                            if (Nombres2 != Nombres2Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Nombres2Esp + " y el encontrado es: " + Nombres2);
        //                            }
        //                            Thread.Sleep(100);

        //                            selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label4')]");
        //                            Thread.Sleep(1000);
        //                            selenium.Screenshot("Apellidos 2", true, file);

        //                            Thread.Sleep(100);
        //                            string Apellidos2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_TbPrincipal_TabPanel1_Label4')]");
        //                            Thread.Sleep(100);
        //                            if (Apellidos2 != Apellidos2Esp)
        //                            {
        //                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Apellidos2Esp + " y el encontrado es: " + Apellidos2);
        //                            }
        //                            Thread.Sleep(100);

        //                            /////////// Validación TABS ////////  
        //                            selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
        //                            for (int i = 0; i < 7; i++)
        //                            {
        //                                Keyboard.SendKeys("{TAB}");
        //                                selenium.Screenshot("TAB", true, file);

        //                                Thread.Sleep(100);
        //                            }

        //                            fv.ConvertWordToPDF(file, database);
        //                            ////////////////////////////////////////////////////
        //                            if (errorMessagesMetodo.Count > 0)
        //                            {
        //                                var separator = string.Format("{0}{0}", Environment.NewLine);
        //                                string errorMessageString = string.Join(separator, errorMessagesMetodo);
        //                                Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
        //                                                    Environment.NewLine, errorMessageString));
        //                            }
        //                            Thread.Sleep(3000);
        //                            bandera = true;

        //                            DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
        //                            string SthCount = null;
        //                            foreach (DataRow rowsta in Sth.Tables[0].Rows)
        //                            {
        //                                SthCount = rowsta["CountDes"].ToString();
        //                                int StCount = Int32.Parse(SthCount);

        //                                if (StCount > 0)
        //                                {
        //                                    int NewCount = StCount - 1;
        //                                    DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
        //                                    if (NewCount == 0)
        //                                    {
        //                                        DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            break;
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            Thread.Sleep(1000);
        //                            bandera = true;
        //                            DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
        //                            string SthCount = null;
        //                            foreach (DataRow rowsta in Sth.Tables[0].Rows)
        //                            {
        //                                SthCount = rowsta["CountDes"].ToString();

        //                                int StCount = Int32.Parse(SthCount);
        //                                if (StCount > 0)
        //                                {
        //                                    int NewCount = StCount - 1;
        //                                    DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
        //                                    if (NewCount == 0)
        //                                    {
        //                                        DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            Assert.Fail(CaseId + " ::::::" + e.ToString());
        //                            break;
        //                        }
        //                    }
        //                }
        //                break;
        //            }
        //        }
        //        else
        //        {
        //            errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
        //        }
        //    }
        //    if (bandera == false)
        //    {
        //        if (errorMessages.Count > 0)
        //        {
        //            var separator = string.Format("{0}{0}", Environment.NewLine);
        //            string errorMessageString = string.Join(separator, errorMessages);

        //            Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
        //                         Environment.NewLine, errorMessageString));
        //        }
        //    }
        //}


        // Reutilizado para cortos

        [TestMethod]
        public void SmartPeople_frmBeSolicCSNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmBeSolicCSNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(6000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Lista de Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
                                    for (int i = 0; i < 6; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmBiPeFunCNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmBiPeFunCNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string GradoEsp = rows["GradoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Cargos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNivel')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNivel')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblGraCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grado del Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Grado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblGraCarg')]");
                                    Thread.Sleep(100);
                                    if (Grado != GradoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GradoEsp + " y el encontrado es: " + Grado);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmBpCenvaLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmBpCenvaLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApEsp"].ToString().Length != 0 && rows["ConsultarApEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApEsp = rows["ConsultarApEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                    }

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Mis Centros Vacacionales", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]");
                                    for (int i = 0; i < 6; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmBpSugerNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmBpSugerNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null &&
                                rows["SugerenciasEsp"].ToString().Length != 0 && rows["SugerenciasEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();
                                string SugerenciasEsp = rows["SugerenciasEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Buzón de Sugerencias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Guardar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_divCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_divCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_divNomFami')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_divNomFami')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_divApeFami')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_divApeFami')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivipLecPais_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad", true, file);

                                    Thread.Sleep(100);
                                    string Ciudad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivipLecPais_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSuger')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Sugerencias", true, file);

                                    Thread.Sleep(100);
                                    string Sugerencias = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSuger')]");
                                    Thread.Sleep(100);
                                    if (Sugerencias != SugerenciasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SugerenciasEsp + " y el encontrado es: " + Sugerencias);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_cod_empl')]");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmCertiGoberC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmCertiGoberC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NroSolicitudEsp"].ToString().Length != 0 && rows["NroSolicitudEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NroSolicitudEsp = rows["NroSolicitudEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Buzón de Sugerencias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string NroSolicitud = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroSoli')]");
                                    Thread.Sleep(100);
                                    if (NroSolicitud != NroSolicitudEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroSolicitudEsp + " y el encontrado es: " + NroSolicitud);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmCoEncueLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmCoEncueLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Encuestas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmCoEncueLRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmCoEncueLRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Resultado de Clima Organizacional", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEd3CotipEvDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEd3CotipEvDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaInicioEsp"].ToString().Length != 0 && rows["FechaInicioEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaInicioEsp = rows["FechaInicioEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Evaluaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaInicio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaInicio != FechaInicioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaInicioEsp + " y el encontrado es: " + FechaInicio);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEd3metaLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEd3metaLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["PrototipoEsp"].ToString().Length != 0 && rows["PrototipoEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApeEsp"].ToString().Length != 0 && rows["ConsultarApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string PrototipoEsp = rows["PrototipoEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApeEsp = rows["ConsultarApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Evaluacion de Desempeño Competencias Metas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prototipo de la Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string Prototipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(100);
                                    if (Prototipo != PrototipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrototipoEsp + " y el encontrado es: " + Prototipo);
                                    }
                                    Thread.Sleep(100);

                                    /*selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarId != ConsultarIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarNom != ConsultarNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNomEsp + " y el encontrado es: " + ConsultarNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarApe != ConsultarApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApeEsp + " y el encontrado es: " + ConsultarApe);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEd3reseccLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEd3reseccLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Evaluación de Competencias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEd3reselcDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEd3reselcDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["FiltroEsp"].ToString().Length != 0 && rows["FiltroEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string FiltroEsp = rows["FiltroEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Evaluaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Filtro", true, file);

                                    Thread.Sleep(100);
                                    string Filtro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(100);
                                    if (Filtro != FiltroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FiltroEsp + " y el encontrado es: " + Filtro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEd3reseldDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEd3reseldDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["FiltroEsp"].ToString().Length != 0 && rows["FiltroEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string FiltroEsp = rows["FiltroEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Evaluaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Filtro", true, file);

                                    Thread.Sleep(100);
                                    string Filtro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(100);
                                    if (Filtro != FiltroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FiltroEsp + " y el encontrado es: " + Filtro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEdAnaliNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEdAnaliNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EvalEsp"].ToString().Length != 0 && rows["EvalEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EvalEsp = rows["EvalEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Análisis de Evaluación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Año Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string Eval = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Eval != EvalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EvalEsp + " y el encontrado es: " + Eval);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEdCalServNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEdCalServNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EvalEsp"].ToString().Length != 0 && rows["EvalEsp"].ToString() != null &&
                                rows["CedulaEsp"].ToString().Length != 0 && rows["CedulaEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EvalEsp = rows["EvalEsp"].ToString();
                                string CedulaEsp = rows["CedulaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Calificación Servicios", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label14')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string Eval = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label14')]");
                                    Thread.Sleep(100);
                                    if (Eval != EvalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EvalEsp + " y el encontrado es: " + Eval);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label10')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cedula", true, file);

                                    Thread.Sleep(100);
                                    string Cedula = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label10')]");
                                    Thread.Sleep(100);
                                    if (Cedula != CedulaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CedulaEsp + " y el encontrado es: " + Cedula);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecini_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecini_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[cotains(@id,'ctl00_ContenidoPagina_KCtrlFecfin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[cotains(@id,'ctl00_ContenidoPagina_KCtrlFecfin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label14')]");
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEdFomeIntLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEdFomeIntLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Calificación Servicios", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEdGrascRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEdGrascRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["TipoPosEsp"].ToString().Length != 0 && rows["TipoPosEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApeEsp"].ToString().Length != 0 && rows["ConsultarApeEsp"].ToString() != null &&
                                rows["TipoPerfilEsp"].ToString().Length != 0 && rows["TipoPerfilEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string TipoPosEsp = rows["TipoPosEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApeEsp = rows["ConsultarApeEsp"].ToString();
                                string TipoPerfilEsp = rows["TipoPerfilEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("frmEdGrascR", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);
                                    if (database == "SQL")
                                    {
                                        //Validación Emergentes campos
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipPost')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Postulante", true, file);

                                        Thread.Sleep(100);
                                        string TipoPos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipPost')]");
                                        Thread.Sleep(100);
                                        if (TipoPos != TipoPosEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoPosEsp + " y el encontrado es: " + TipoPos);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_lblTipPerf']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Perfil", true, file);

                                        Thread.Sleep(100);
                                        string ConsultarPerfil = selenium.Emergente("//*[@id='ctl00_ContenidoPagina_lblTipPerf']");
                                        Thread.Sleep(100);
                                        if (ConsultarPerfil != TipoPerfilEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoPerfilEsp + " y el encontrado es: " + ConsultarPerfil);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_lblCodEmpr']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Empresa", true, file);

                                        Thread.Sleep(100);
                                        string Empresa = selenium.Emergente("//*[@id='ctl00_ContenidoPagina_lblCodEmpr']");
                                        Thread.Sleep(100);
                                        if (Empresa != EmpresaEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                        }
                                        Thread.Sleep(100);

                                        /*selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Consultar Por Identificación", true, file);

                                        Thread.Sleep(100);
                                        string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                        Thread.Sleep(100);
                                        if (ConsultarId != ConsultarIdEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Consultar Por Nombres", true, file);

                                        Thread.Sleep(100);
                                        string ConsultarNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                        Thread.Sleep(100);
                                        if (ConsultarNom != ConsultarNomEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNomEsp + " y el encontrado es: " + ConsultarNom);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Consultar Por Apellidos", true, file);

                                        Thread.Sleep(100);
                                        string ConsultarApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                        Thread.Sleep(100);
                                        if (ConsultarApe != ConsultarApeEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApeEsp + " y el encontrado es: " + ConsultarApe);
                                        }
                                        Thread.Sleep(100);*/
                                    }
                                    else
                                    {
                                        //Validación Emergentes campos
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_lblTipPost']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Postulante", true, file);

                                        Thread.Sleep(100);
                                        string TipoPos = selenium.Emergente("//*[@id='ctl00_ContenidoPagina_lblTipPost']");
                                        Thread.Sleep(100);
                                        if (TipoPos != TipoPosEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoPosEsp + " y el encontrado es: " + TipoPos);
                                        }
                                        Thread.Sleep(100);
                                    }


                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipPost')]");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmEvaluadosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmEvaluadosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ProtoEvalEsp"].ToString().Length != 0 && rows["ProtoEvalEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApeEsp"].ToString().Length != 0 && rows["ConsultarApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ProtoEvalEsp = rows["ProtoEvalEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApeEsp = rows["ConsultarApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(15000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Formulario Eval. Competencias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 14; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    //Debugger.Launch();
                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prototipo de la Evalucación", true, file);

                                    Thread.Sleep(100);
                                    string ProtoEval = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(100);
                                    if (ProtoEval != ProtoEvalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProtoEvalEsp + " y el encontrado es: " + ProtoEval);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(500);
                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar Por Identificación", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsultarId != ConsultarIdEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(500);
                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar Por Nombres", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsultarNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsultarNom != ConsultarNomEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNomEsp + " y el encontrado es: " + ConsultarNom);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(500);
                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsultarApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsultarApe != ConsultarApeEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApeEsp + " y el encontrado es: " + ConsultarApe);
                                    //}
                                    //Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmFdEvaCurLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmFdEvaCurLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApeEsp"].ToString().Length != 0 && rows["ConsultarApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApeEsp = rows["ConsultarApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Evaluación de Cursos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarId != ConsultarIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarNom != ConsultarNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNomEsp + " y el encontrado es: " + ConsultarNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarApe != ConsultarApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApeEsp + " y el encontrado es: " + ConsultarApe);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmFdGuiApreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmFdGuiApreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["CodCursoEsp"].ToString().Length != 0 && rows["CodCursoEsp"].ToString() != null &&
                                rows["NomCursoEsp"].ToString().Length != 0 && rows["NomCursoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string CodCursoEsp = rows["CodCursoEsp"].ToString();
                                string NomCursoEsp = rows["NomCursoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Guia Aprendizaje", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Curso", true, file);

                                    Thread.Sleep(100);
                                    string CodCurso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(100);
                                    if (CodCurso != CodCursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCursoEsp + " y el encontrado es: " + CodCurso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre Curso", true, file);

                                    Thread.Sleep(100);
                                    string NomCurso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(100);
                                    if (NomCurso != NomCursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomCursoEsp + " y el encontrado es: " + NomCurso);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmFdNesoeANTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmFdNesoeANTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["ProgramaEsp"].ToString().Length != 0 && rows["ProgramaEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["NumSolEsp"].ToString().Length != 0 && rows["NumSolEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["FechaEstaEsp"].ToString().Length != 0 && rows["FechaEstaEsp"].ToString() != null &&
                                rows["FechaProgEsp"].ToString().Length != 0 && rows["FechaProgEsp"].ToString() != null &&
                                rows["ObservacionesEsp"].ToString().Length != 0 && rows["ObservacionesEsp"].ToString() != null &&
                                rows["EstadoSolicitudEsp"].ToString().Length != 0 && rows["EstadoSolicitudEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string ProgramaEsp = rows["ProgramaEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string NumSolEsp = rows["NumSolEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string FechaEstaEsp = rows["FechaEstaEsp"].ToString();
                                string FechaProgEsp = rows["FechaProgEsp"].ToString();
                                string ObservacionesEsp = rows["ObservacionesEsp"].ToString();
                                string EstadoSolicitudEsp = rows["EstadoSolicitudEsp"].ToString();
                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Cursos Solicitados", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCurSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Curso", true, file);

                                    Thread.Sleep(100);
                                    string Curso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCurSoli')]");
                                    Thread.Sleep(100);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodProg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Programa", true, file);

                                    Thread.Sleep(100);
                                    string Programa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodProg')]");
                                    Thread.Sleep(100);
                                    if (Programa != ProgramaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProgramaEsp + " y el encontrado es: " + Programa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecSoli_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecSoli_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Número de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string NumSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumSol != NumSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumSolEsp + " y el encontrado es: " + NumSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(500);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);


                                    Thread.Sleep(100);
                                    string EstadoSolicitud = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (EstadoSolicitud != EstadoSolicitudEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoSolicitudEsp + " y el encontrado es: " + EstadoSolicitud);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecEsta_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Estado", true, file);

                                    Thread.Sleep(100);
                                    string FechaEsta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecEsta_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaEsta != FechaEstaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEstaEsp + " y el encontrado es: " + FechaEsta);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecProg_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Programada", true, file);

                                    Thread.Sleep(100);
                                    string FechaProg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecProg_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaProg != FechaProgEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaProgEsp + " y el encontrado es: " + FechaProg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observaciones = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(100);
                                    if (Observaciones != ObservacionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservacionesEsp + " y el encontrado es: " + Observaciones);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////  

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(500);

                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }
                                    Thread.Sleep(500);

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmFdSolemANTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmFdSolemANTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//a[contains(.,'Cerrar')]"))
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitud de Entrenamiento", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);



                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmFdReginNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmFdReginNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["CostoEsp"].ToString().Length != 0 && rows["CostoEsp"].ToString() != null &&
                                rows["DependenciaEsp"].ToString().Length != 0 && rows["DependenciaEsp"].ToString() != null &&
                                rows["ParametroEsp"].ToString().Length != 0 && rows["ParametroEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["AsignaturaEsp"].ToString().Length != 0 && rows["AsignaturaEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&
                                rows["HoraIniEsp"].ToString().Length != 0 && rows["HoraIniEsp"].ToString() != null &&
                                rows["HoraFinEsp"].ToString().Length != 0 && rows["HoraFinEsp"].ToString() != null &&
                                rows["InasistenteEsp"].ToString().Length != 0 && rows["InasistenteEsp"].ToString() != null &&
                                rows["JustificadaEsp"].ToString().Length != 0 && rows["JustificadaEsp"].ToString() != null &&
                                rows["InasistenciaEsp"].ToString().Length != 0 && rows["InasistenciaEsp"].ToString() != null &&
                                rows["PermisoEsp"].ToString().Length != 0 && rows["PermisoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string CostoEsp = rows["CostoEsp"].ToString();
                                string DependenciaEsp = rows["DependenciaEsp"].ToString();
                                string ParametroEsp = rows["ParametroEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string AsignaturaEsp = rows["AsignaturaEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();
                                string HoraIniEsp = rows["HoraIniEsp"].ToString();
                                string HoraFinEsp = rows["HoraFinEsp"].ToString();
                                string InasistenteEsp = rows["InasistenteEsp"].ToString();
                                string JustificadaEsp = rows["JustificadaEsp"].ToString();
                                string InasistenciaEsp = rows["InasistenciaEsp"].ToString();
                                string PermisoEsp = rows["PermisoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Sin Título", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación subtitulo botones
                                    //string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    //Thread.Sleep(100);
                                    //if (Subtitulo != SubtituloEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Guardar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    /* selenium.Click("//div[@id='ctl00_pBotones']/div");
                                     Thread.Sleep(500);
                                     selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                     Thread.Sleep(1000);
                                     selenium.Screenshot("Nombres / Apellidos", true, file);

                                     Thread.Sleep(100);
                                     string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                     Thread.Sleep(100);
                                     if (NomApe != NomApeEsp)
                                     {
                                         errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                     }
                                     Thread.Sleep(100);*/

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string Costo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (Costo != CostoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CostoEsp + " y el encontrado es: " + Costo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dependencia", true, file);

                                    Thread.Sleep(100);
                                    string Dependencia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(100);
                                    if (Dependencia != DependenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependenciaEsp + " y el encontrado es: " + Dependencia);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtPara')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Parametro", true, file);

                                    Thread.Sleep(100);
                                    string Parametro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtPara')]");
                                    Thread.Sleep(100);
                                    if (Parametro != ParametroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParametroEsp + " y el encontrado es: " + Parametro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Curso", true, file);

                                    Thread.Sleep(100);
                                    string Curso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(100);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSesi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Asignatura", true, file);

                                    Thread.Sleep(100);
                                    string Asignatura = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSesi')]");
                                    Thread.Sleep(100);
                                    if (Asignatura != AsignaturaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsignaturaEsp + " y el encontrado es: " + Asignatura);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInas_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Inasistencia", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInas_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlHorInic_lblHora')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Inicial", true, file);

                                    Thread.Sleep(100);
                                    string HoraIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlHorInic_lblHora')]");
                                    Thread.Sleep(100);
                                    if (HoraIni != HoraIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraIniEsp + " y el encontrado es: " + HoraIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[@id='ctl00_ContenidoPagina_KCtrlHorFina_lblHora']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Final", true, file);

                                    Thread.Sleep(100);
                                    string HoraFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlHorInic_lblHora')]");
                                    Thread.Sleep(100);
                                    if (HoraFin != HoraFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinEsp + " y el encontrado es: " + HoraFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipInas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Inasistente", true, file);

                                    Thread.Sleep(100);
                                    string Inasistente = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipInas')]");
                                    Thread.Sleep(100);
                                    if (Inasistente != InasistenteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InasistenteEsp + " y el encontrado es: " + Inasistente);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblJusTifi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Justificada", true, file);

                                    Thread.Sleep(100);
                                    string Justificada = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblJusTifi')]");
                                    Thread.Sleep(100);
                                    if (Justificada != JustificadaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JustificadaEsp + " y el encontrado es: " + Justificada);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_txtMotInas_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo Inasistencia", true, file);

                                    Thread.Sleep(100);
                                    string Inasistencia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_txtMotInas_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Inasistencia != InasistenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InasistenciaEsp + " y el encontrado es: " + Inasistencia);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtMOT_PERM_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo Permiso", true, file);

                                    Thread.Sleep(100);
                                    string Permiso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtMOT_PERM_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Permiso != PermisoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PermisoEsp + " y el encontrado es: " + Permiso);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }



                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLEdInfCon360NTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLEdInfCon360NTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["PrototiposEsp"].ToString().Length != 0 && rows["PrototiposEsp"].ToString() != null &&
                                rows["PeriodosEsp"].ToString().Length != 0 && rows["PeriodosEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["ConsultarNomEsp"].ToString().Length != 0 && rows["ConsultarNomEsp"].ToString() != null &&
                                rows["ConsultarApeEsp"].ToString().Length != 0 && rows["ConsultarApeEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["NivCargoEsp"].ToString().Length != 0 && rows["NivCargoEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["AreaEsp"].ToString().Length != 0 && rows["AreaEsp"].ToString() != null &&
                                rows["ArbolEsp"].ToString().Length != 0 && rows["ArbolEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string PrototiposEsp = rows["PrototiposEsp"].ToString();
                                string PeriodosEsp = rows["PeriodosEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string ConsultarNomEsp = rows["ConsultarNomEsp"].ToString();
                                string ConsultarApeEsp = rows["ConsultarApeEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string NivCargoEsp = rows["NivCargoEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string AreaEsp = rows["AreaEsp"].ToString();
                                string ArbolEsp = rows["ArbolEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Informes Competencias 360", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prototipos", true, file);

                                    Thread.Sleep(100);
                                    string Prototipos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(100);
                                    if (Prototipos != PrototiposEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrototiposEsp + " y el encontrado es: " + Prototipos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblPeriodo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Periodos", true, file);

                                    Thread.Sleep(100);
                                    string Periodos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblPeriodo')]");
                                    Thread.Sleep(100);
                                    if (Periodos != PeriodosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PeriodosEsp + " y el encontrado es: " + Periodos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarId != ConsultarIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nomnres", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarNom != ConsultarNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarNomEsp + " y el encontrado es: " + ConsultarNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarApe != ConsultarApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarApeEsp + " y el encontrado es: " + ConsultarApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsultarCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel Cargo", true, file);

                                    Thread.Sleep(100);
                                    string NivCargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsultarCodNive')]");
                                    Thread.Sleep(100);
                                    if (NivCargo != NivCargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivCargoEsp + " y el encontrado es: " + NivCargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodArea')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Area", true, file);

                                    Thread.Sleep(100);
                                    string Area = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodArea')]");
                                    Thread.Sleep(100);
                                    if (Area != AreaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaEsp + " y el encontrado es: " + Area);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentrab0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Arbol", true, file);

                                    Thread.Sleep(100);
                                    string Arbol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentrab0')]");
                                    Thread.Sleep(100);
                                    if (Arbol != ArbolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ArbolEsp + " y el encontrado es: " + Arbol);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmCtrreAutNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmCtrreAutNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["EmpleadosEsp"].ToString().Length != 0 && rows["EmpleadosEsp"].ToString() != null &&
                                rows["EmpleadoIdEsp"].ToString().Length != 0 && rows["EmpleadoIdEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string EmpleadosEsp = rows["EmpleadosEsp"].ToString();
                                string EmpleadoIdEsp = rows["EmpleadoIdEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();


                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(2000);

                                    selenium.Scroll("//a[contains(.,'Autorizacion Funcionarios')]");
                                    selenium.Click("//a[contains(.,'Autorizacion Funcionarios')]");
                                    Thread.Sleep(2000);


                                    selenium.Click("//*[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(2000);



                                    selenium.Screenshot("Autorización de Funcionarios", true, file);



                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl12')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empleados", true, file);

                                    Thread.Sleep(100);
                                    string Empleados = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl12')]");
                                    Thread.Sleep(100);
                                    if (Empleados != EmpleadosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpleadosEsp + " y el encontrado es: " + Empleados);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl6')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación del Empleado", true, file);

                                    Thread.Sleep(100);
                                    string EmpleadoId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl6')]");
                                    Thread.Sleep(100);
                                    if (EmpleadoId != EmpleadoIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpleadoIdEsp + " y el encontrado es: " + EmpleadoId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl7')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre del Empleado", true, file);

                                    Thread.Sleep(100);
                                    string NomEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl7')]");
                                    Thread.Sleep(100);
                                    if (NomEmpl != NomEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmplEsp + " y el encontrado es: " + NomEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsAct_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsAct_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmCtrreAutLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmCtrreAutLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(2000);

                                    selenium.Scroll("//a[contains(.,'Autorizacion Funcionarios')]");
                                    selenium.Click("//a[contains(.,'Autorizacion Funcionarios')]");
                                    Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    //driver.Navigate().GoToUrl(url2);
                                    //Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Autorización de Funcionarios", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmCtrreDesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmCtrreDesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["CentroCostoEsp"].ToString().Length != 0 && rows["CentroCostoEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string CentroCostoEsp = rows["CentroCostoEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Registro Horas - Líder", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCosto = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(100);
                                    if (CentroCosto != CentroCostoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostoEsp + " y el encontrado es: " + CentroCosto);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmHopcoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmHopcoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Ventana Error", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Permanencias Fuera de Horario Pendientes por Compensar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("N. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmHopcoLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmHopcoLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Programar Compensación del Jefe", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmHopcoPNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmHopcoPNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["TiempoCEsp"].ToString().Length != 0 && rows["TiempoCEsp"].ToString() != null &&
                                rows["TotalEsp"].ToString().Length != 0 && rows["TotalEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string TiempoCEsp = rows["TiempoCEsp"].ToString();
                                string TotalEsp = rows["TotalEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Error Ventana", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Programación de Compensaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("N. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tiempo por Compensar", true, file);

                                    Thread.Sleep(100);
                                    string TiempoC = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(100);
                                    if (TiempoC != TiempoCEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TiempoCEsp + " y el encontrado es: " + TiempoC);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Total HH MM", true, file);

                                    Thread.Sleep(100);
                                    string Total = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(100);
                                    if (Total != TotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotalEsp + " y el encontrado es: " + Total);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmHopreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmHopreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Error Ventana", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Programar Compensación del Jefe", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmHoprePNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmHoprePNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["TiempoCEsp"].ToString().Length != 0 && rows["TiempoCEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string TiempoCEsp = rows["TiempoCEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Programación de Compensaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("N. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tiempo por Compensar", true, file);

                                    Thread.Sleep(100);
                                    string TiempoC = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(100);
                                    if (TiempoC != TiempoCEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TiempoCEsp + " y el encontrado es: " + TiempoC);
                                    }
                                    Thread.Sleep(100);
                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmJedesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmJedesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["FechaComEsp"].ToString().Length != 0 && rows["FechaComEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string FechaComEsp = rows["FechaComEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Programación de Compensaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDesde_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Comunicación", true, file);

                                    Thread.Sleep(100);
                                    string FechaCom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDesde_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaCom != FechaComEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaComEsp + " y el encontrado es: " + FechaCom);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");

                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmNovteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmNovteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["ConsultarIdEsp"].ToString().Length != 0 && rows["ConsultarIdEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["TipoNovEsp"].ToString().Length != 0 && rows["TipoNovEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["VCuotaEsp"].ToString().Length != 0 && rows["VCuotaEsp"].ToString() != null &&
                                rows["NCuotasEsp"].ToString().Length != 0 && rows["NCuotasEsp"].ToString() != null &&
                                rows["VtotalEsp"].ToString().Length != 0 && rows["VtotalEsp"].ToString() != null &&
                                rows["SNovedadEsp"].ToString().Length != 0 && rows["SNovedadEsp"].ToString() != null &&
                                rows["FechaPagoEsp"].ToString().Length != 0 && rows["FechaPagoEsp"].ToString() != null &&
                                rows["FechaNovEsp"].ToString().Length != 0 && rows["FechaNovEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string ConsultarIdEsp = rows["ConsultarIdEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string TipoNovEsp = rows["TipoNovEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string VCuotaEsp = rows["VCuotaEsp"].ToString();
                                string NCuotasEsp = rows["NCuotasEsp"].ToString();
                                string VtotalEsp = rows["VtotalEsp"].ToString();
                                string SNovedadEsp = rows["SNovedadEsp"].ToString();
                                string FechaPagoEsp = rows["FechaPagoEsp"].ToString();
                                string FechaNovEsp = rows["FechaNovEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Novedades Temporales Líder", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);
                                    //Debugger.Launch();
                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsultarId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsultarId != ConsultarIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsultarIdEsp + " y el encontrado es: " + ConsultarId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Concepto", true, file);

                                    Thread.Sleep(100);
                                    string Concepto = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]");
                                    Thread.Sleep(100);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + Concepto);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Novedad", true, file);

                                    Thread.Sleep(100);
                                    string TipoNov = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]");
                                    Thread.Sleep(100);
                                    if (TipoNov != TipoNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovEsp + " y el encontrado es: " + TipoNov);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad", true, file);

                                    Thread.Sleep(100);
                                    string Cantidad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]");
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Cuota", true, file);

                                    Thread.Sleep(100);
                                    string VCuota = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]");
                                    Thread.Sleep(100);
                                    if (VCuota != VCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VCuotaEsp + " y el encontrado es: " + VCuota);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Cuotas", true, file);

                                    Thread.Sleep(100);
                                    string NCuotas = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]");
                                    Thread.Sleep(100);
                                    if (NCuotas != NCuotasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NCuotasEsp + " y el encontrado es: " + NCuotas);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Total", true, file);

                                    Thread.Sleep(100);
                                    string Vtotal = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]");
                                    Thread.Sleep(100);
                                    if (Vtotal != VtotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VtotalEsp + " y el encontrado es: " + Vtotal);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Saldo Novedad", true, file);

                                    Thread.Sleep(100);
                                    string SNovedad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]");
                                    Thread.Sleep(100);
                                    if (SNovedad != SNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SNovedadEsp + " y el encontrado es: " + SNovedad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPago_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Pago", true, file);

                                    Thread.Sleep(100);
                                    string FechaPago = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPago_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaPago != FechaPagoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaPagoEsp + " y el encontrado es: " + FechaPago);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReal_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Novedad", true, file);

                                    Thread.Sleep(100);
                                    string FechaNov = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReal_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaNov != FechaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNovEsp + " y el encontrado es: " + FechaNov);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmOprecLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINmOprecLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Programación de Compensaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    /////////// Validación TABS ////////                                    

                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINovteAproLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLINovteAproLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Aprobación de Novedades", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);



                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLIPerLicVacLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLIPerLicVacLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ExpExcelEsp"].ToString().Length != 0 && rows["ExpExcelEsp"].ToString() != null &&
                                rows["TipoSolicitudEsp"].ToString().Length != 0 && rows["TipoSolicitudEsp"].ToString() != null &&
                                rows["EstaSolEsp"].ToString().Length != 0 && rows["EstaSolEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ExpExcelEsp = rows["ExpExcelEsp"].ToString();
                                string TipoSolicitudEsp = rows["TipoSolicitudEsp"].ToString();
                                string EstaSolEsp = rows["EstaSolEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Permios Licencias Vacaciones Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Exportar Excel
                                    string ExpExcel = selenium.EmergenteBotones("ctl00_btnExportar");
                                    Thread.Sleep(100);
                                    if (ExpExcel != ExpExcelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ExpExcelEsp + " y el encontrado es: " + ExpExcel);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipoSolicitud = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (TipoSolicitud != TipoSolicitudEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoSolicitudEsp + " y el encontrado es: " + TipoSolicitud);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string EstaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (EstaSol != EstaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaSolEsp + " y el encontrado es: " + EstaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Corte Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Corte Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + "y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);


                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLIRFdPlcurLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLIRFdPlcurLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Error Ventana", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Cursos de empleados", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLIRHSemRequNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLIRHSemRequNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["GrupoReqEsp"].ToString().Length != 0 && rows["GrupoReqEsp"].ToString() != null &&
                                rows["CargoProvEsp"].ToString().Length != 0 && rows["CargoProvEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["NroReqEsp"].ToString().Length != 0 && rows["NroReqEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string GrupoReqEsp = rows["GrupoReqEsp"].ToString();
                                string CargoProvEsp = rows["CargoProvEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string NroReqEsp = rows["NroReqEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Semaforo de Requicisiones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grupo Requicisión", true, file);

                                    Thread.Sleep(100);
                                    string GrupoReq = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesTeva')]");
                                    Thread.Sleep(100);
                                    if (GrupoReq != GrupoReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GrupoReqEsp + " y el encontrado es: " + GrupoReq);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo a Proveer", true, file);

                                    Thread.Sleep(100);
                                    string CargoProv = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (CargoProv != CargoProvEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoProvEsp + " y el encontrado es: " + CargoProv);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costos", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodReqs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Requicisión", true, file);

                                    Thread.Sleep(100);
                                    string NroReq = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodReqs')]");
                                    Thread.Sleep(100);
                                    if (NroReq != NroReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroReqEsp + " y el encontrado es: " + NroReq);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación Persona que Solicito", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaConsu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Desde", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaConsu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaConsuHasta_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Hasta", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaConsuHasta_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISlInducNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISlInducNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Inducción Colaborador", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISlInducRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISlInducRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Inducciones de los Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISlReqpeLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISlReqpeLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["ReqEsp"].ToString().Length != 0 && rows["ReqEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string ReqEsp = rows["ReqEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitud Requisiciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuEst')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Estado", true, file);

                                    Thread.Sleep(100);
                                    string Estado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuEst')]");
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaDes_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Fecha De", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaDes_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaHas_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Fecha Hasta", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaHas_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISoEpacteLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISoEpacteLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["DesCrgEsp"].ToString().Length != 0 && rows["DesCrgEsp"].ToString() != null &&
                                rows["CentroTrabEsp"].ToString().Length != 0 && rows["CentroTrabEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string DesCrgEsp = rows["DesCrgEsp"].ToString();
                                string CentroTrabEsp = rows["CentroTrabEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro ATEL", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtep_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Fecha Desde", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtep_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtepF_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Fecha Hasta", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtepF_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISolVacaLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISolVacaLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Consulta Vacaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl4')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación del Empleado", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl4')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombres = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellidos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLISolviaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLISolviaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["TipoEsp"].ToString().Length != 0 && rows["TipoEsp"].ToString() != null &&
                                rows["TipoViaEsp"].ToString().Length != 0 && rows["TipoViaEsp"].ToString() != null &&
                                rows["MotivoEsp"].ToString().Length != 0 && rows["MotivoEsp"].ToString() != null &&
                                rows["DescripcionEsp"].ToString().Length != 0 && rows["DescripcionEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string TipoEsp = rows["TipoEsp"].ToString();
                                string TipoViaEsp = rows["TipoViaEsp"].ToString();
                                string MotivoEsp = rows["MotivoEsp"].ToString();
                                string DescripcionEsp = rows["DescripcionEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitud de Comisiones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo", true, file);

                                    Thread.Sleep(100);
                                    string Tipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(100);
                                    if (Tipo != TipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEsp + " y el encontrado es: " + Tipo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Viatico", true, file);

                                    Thread.Sleep(100);
                                    string TipoVia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (TipoVia != TipoViaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoViaEsp + " y el encontrado es: " + TipoVia);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMotViat')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo", true, file);

                                    Thread.Sleep(100);
                                    string Motivo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMotViat')]");
                                    Thread.Sleep(100);
                                    if (Motivo != MotivoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoEsp + " y el encontrado es: " + Motivo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDesComi_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripción del Trabajo y o Capacitación", true, file);

                                    Thread.Sleep(100);
                                    string Descripcion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDesComi_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Descripcion != DescripcionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescripcionEsp + " y el encontrado es: " + Descripcion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObser_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de la Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string Observa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObser_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLNmOprecLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLNmOprecLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro Orden Previa Horas Extra", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLoginNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmLoginNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["UsuarioEsp"].ToString().Length != 0 && rows["UsuarioEsp"].ToString() != null &&
                                rows["ContrasenaEsp"].ToString().Length != 0 && rows["ContrasenaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string UsuarioEsp = rows["UsuarioEsp"].ToString();
                                string ContrasenaEsp = rows["ContrasenaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    //Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Login", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);



                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmApvCuenAfpNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmApvCuenAfpNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Mi Información de Cuentas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCambTurNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCambTurNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&
                                rows["TurnoProgEsp"].ToString().Length != 0 && rows["TurnoProgEsp"].ToString() != null &&
                                rows["TurnoAProgEsp"].ToString().Length != 0 && rows["TurnoAProgEsp"].ToString() != null &&
                                rows["MotCambioEsp"].ToString().Length != 0 && rows["MotCambioEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();
                                string TurnoProgEsp = rows["TurnoProgEsp"].ToString();
                                string TurnoAProgEsp = rows["TurnoAProgEsp"].ToString();
                                string MotCambioEsp = rows["MotCambioEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Mis Solicitudes de Cambio de Turno", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecTur_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha del Turno a Cambiar", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecTur_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTurProg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Turno Programado", true, file);

                                    Thread.Sleep(100);
                                    string TurnoProg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTurProg')]");
                                    Thread.Sleep(100);
                                    if (TurnoProg != TurnoProgEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TurnoProgEsp + " y el encontrado es: " + TurnoProg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTurAprog')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Turno a Programar", true, file);

                                    Thread.Sleep(100);
                                    string TurnoAProg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTurAprog')]");
                                    Thread.Sleep(100);
                                    if (TurnoAProg != TurnoAProgEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TurnoAProgEsp + " y el encontrado es: " + TurnoAProg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMoti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo del Cambio", true, file);

                                    Thread.Sleep(100);
                                    string MotCambio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMoti')]");
                                    Thread.Sleep(100);
                                    if (MotCambio != MotCambioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotCambioEsp + " y el encontrado es: " + MotCambio);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo del Cambio", true, file);

                                    Thread.Sleep(100);
                                    string Observa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCesanNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCesanNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["MotSolEsp"].ToString().Length != 0 && rows["MotSolEsp"].ToString() != null &&
                                rows["TipSoliEsp"].ToString().Length != 0 && rows["TipSoliEsp"].ToString() != null &&
                                rows["FechaCorteEsp"].ToString().Length != 0 && rows["FechaCorteEsp"].ToString() != null &&
                                rows["ValSolEsp"].ToString().Length != 0 && rows["ValSolEsp"].ToString() != null &&
                                rows["FondoCesanEsp"].ToString().Length != 0 && rows["FondoCesanEsp"].ToString() != null &&
                                rows["TipDocuEsp"].ToString().Length != 0 && rows["TipDocuEsp"].ToString() != null &&
                                rows["ObservaCesanEsp"].ToString().Length != 0 && rows["ObservaCesanEsp"].ToString() != null &&
                                rows["ObservaSolEsp"].ToString().Length != 0 && rows["ObservaSolEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string MotSolEsp = rows["MotSolEsp"].ToString();
                                string TipSoliEsp = rows["TipSoliEsp"].ToString();
                                string FechaCorteEsp = rows["FechaCorteEsp"].ToString();
                                string ValSolEsp = rows["ValSolEsp"].ToString();
                                string FondoCesanEsp = rows["FondoCesanEsp"].ToString();
                                string TipDocuEsp = rows["TipDocuEsp"].ToString();
                                string ObservaCesanEsp = rows["ObservaCesanEsp"].ToString();
                                string ObservaSolEsp = rows["ObservaSolEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Cesantias", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string MotSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(100);
                                    if (MotSol != MotSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotSolEsp + " y el encontrado es: " + MotSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipSoli = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(100);
                                    if (TipSoli != TipSoliEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipSoliEsp + " y el encontrado es: " + TipSoli);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Corte", true, file);

                                    Thread.Sleep(100);
                                    string FechaCorte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaCorte != FechaCorteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaCorteEsp + " y el encontrado es: " + FechaCorte);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Solicitado", true, file);

                                    Thread.Sleep(100);
                                    string ValSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(100);
                                    if (ValSol != ValSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValSolEsp + " y el encontrado es: " + ValSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fondo de Cesantias", true, file);

                                    Thread.Sleep(100);
                                    string FondoCesan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(100);
                                    if (FondoCesan != FondoCesanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FondoCesanEsp + " y el encontrado es: " + FondoCesan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Documuento", true, file);

                                    Thread.Sleep(100);
                                    string TipDocu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]");
                                    Thread.Sleep(100);
                                    if (TipDocu != TipDocuEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipDocuEsp + " y el encontrado es: " + TipDocu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de Cesantias", true, file);

                                    Thread.Sleep(100);
                                    string ObservaCesan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (ObservaCesan != ObservaCesanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaCesanEsp + " y el encontrado es: " + ObservaCesan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de la Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string ObservaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (ObservaSol != ObservaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaSolEsp + " y el encontrado es: " + ObservaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 15; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCesanDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCesanDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["MotSolEsp"].ToString().Length != 0 && rows["MotSolEsp"].ToString() != null &&
                                rows["TipSoliEsp"].ToString().Length != 0 && rows["TipSoliEsp"].ToString() != null &&
                                rows["FechaCorteEsp"].ToString().Length != 0 && rows["FechaCorteEsp"].ToString() != null &&
                                rows["ValSolEsp"].ToString().Length != 0 && rows["ValSolEsp"].ToString() != null &&
                                rows["FondoCesanEsp"].ToString().Length != 0 && rows["FondoCesanEsp"].ToString() != null &&
                                rows["TipDocuEsp"].ToString().Length != 0 && rows["TipDocuEsp"].ToString() != null &&
                                rows["ObservaCesanEsp"].ToString().Length != 0 && rows["ObservaCesanEsp"].ToString() != null &&
                                rows["ObservaSolEsp"].ToString().Length != 0 && rows["ObservaSolEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string MotSolEsp = rows["MotSolEsp"].ToString();
                                string TipSoliEsp = rows["TipSoliEsp"].ToString();
                                string FechaCorteEsp = rows["FechaCorteEsp"].ToString();
                                string ValSolEsp = rows["ValSolEsp"].ToString();
                                string FondoCesanEsp = rows["FondoCesanEsp"].ToString();
                                string TipDocuEsp = rows["TipDocuEsp"].ToString();
                                string ObservaCesanEsp = rows["ObservaCesanEsp"].ToString();
                                string ObservaSolEsp = rows["ObservaSolEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Cesantias de Mis Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string MotSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(100);
                                    if (MotSol != MotSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotSolEsp + " y el encontrado es: " + MotSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipSoli = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(100);
                                    if (TipSoli != TipSoliEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipSoliEsp + " y el encontrado es: " + TipSoli);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Corte", true, file);

                                    Thread.Sleep(100);
                                    string FechaCorte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaCorte != FechaCorteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaCorteEsp + " y el encontrado es: " + FechaCorte);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Solicitado", true, file);

                                    Thread.Sleep(100);
                                    string ValSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(100);
                                    if (ValSol != ValSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValSolEsp + " y el encontrado es: " + ValSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fondo de Cesantias", true, file);

                                    Thread.Sleep(100);
                                    string FondoCesan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(100);
                                    if (FondoCesan != FondoCesanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FondoCesanEsp + " y el encontrado es: " + FondoCesan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Documuento", true, file);

                                    Thread.Sleep(100);
                                    string TipDocu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]");
                                    Thread.Sleep(100);
                                    if (TipDocu != TipDocuEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipDocuEsp + " y el encontrado es: " + TipDocu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de Cesantias", true, file);

                                    Thread.Sleep(100);
                                    string ObservaCesan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (ObservaCesan != ObservaCesanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaCesanEsp + " y el encontrado es: " + ObservaCesan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de la Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string ObservaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (ObservaSol != ObservaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaSolEsp + " y el encontrado es: " + ObservaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCespaL50NTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCespaL50NTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["NroContratoEsp"].ToString().Length != 0 && rows["NroContratoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["TipSolEsp"].ToString().Length != 0 && rows["TipSolEsp"].ToString() != null &&
                                rows["MotRetiroEsp"].ToString().Length != 0 && rows["MotRetiroEsp"].ToString() != null &&
                                rows["ValRetiroEsp"].ToString().Length != 0 && rows["ValRetiroEsp"].ToString() != null &&
                                rows["MatriculaEsp"].ToString().Length != 0 && rows["MatriculaEsp"].ToString() != null &&
                                rows["IdBeEsp"].ToString().Length != 0 && rows["IdBeEsp"].ToString() != null &&
                                rows["NomBeneEsp"].ToString().Length != 0 && rows["NomBeneEsp"].ToString() != null &&
                                rows["AdjDocumEsp"].ToString().Length != 0 && rows["AdjDocumEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string NroContratoEsp = rows["NroContratoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string TipSolEsp = rows["TipSolEsp"].ToString();
                                string MotRetiroEsp = rows["MotRetiroEsp"].ToString();
                                string ValRetiroEsp = rows["ValRetiroEsp"].ToString();
                                string MatriculaEsp = rows["MatriculaEsp"].ToString();
                                string IdBeEsp = rows["IdBeEsp"].ToString();
                                string NomBeneEsp = rows["NomBeneEsp"].ToString();
                                string AdjDocumEsp = rows["AdjDocumEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Mis Solicitudes de Cesantías", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContrato != NroContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContratoEsp + " y el encontrado es: " + NroContrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti0')]");
                                    Thread.Sleep(100);
                                    if (TipSol != TipSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipSolEsp + " y el encontrado es: " + TipSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodReti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo de Retiro", true, file);

                                    Thread.Sleep(100);
                                    string MotRetiro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodReti')]");
                                    Thread.Sleep(100);
                                    if (MotRetiro != MotRetiroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotRetiroEsp + " y el encontrado es: " + MotRetiro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor del Retiro", true, file);

                                    Thread.Sleep(100);
                                    string ValRetiro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(100);
                                    if (ValRetiro != ValRetiroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValRetiroEsp + " y el encontrado es: " + ValRetiro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDirPred')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Matrícula Inmobiliaria del Inmueble", true, file);

                                    Thread.Sleep(100);
                                    string Matricula = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDirPred')]");
                                    Thread.Sleep(100);
                                    if (Matricula != MatriculaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MatriculaEsp + " y el encontrado es: " + Matricula);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación de Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string IdBe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces1')]");
                                    Thread.Sleep(100);
                                    if (IdBe != IdBeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdBeEsp + " y el encontrado es: " + IdBe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomBenf')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre del Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string NomBene = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomBenf')]");
                                    Thread.Sleep(100);
                                    if (NomBene != NomBeneEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomBeneEsp + " y el encontrado es: " + NomBene);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(500);
                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjDocu')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Adjuntar Documento", true, file);

                                    //Thread.Sleep(100);
                                    //string AdjDocum = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjDocu')]");
                                    //Thread.Sleep(100);
                                    //if (AdjDocum != AdjDocumEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AdjDocumEsp + " y el encontrado es: " + AdjDocum);
                                    //}
                                    //Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmConAuPendNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmConAuPendNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulNovedadEsp"].ToString().Length != 0 && rows["ConsulNovedadEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulNovedadEsp = rows["ConsulNovedadEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);                                    

                                    selenium.Screenshot("Consulta Novedad de Marcacion Pendientes por Aprobar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Tipo de Novedad", true, file);

                                    Thread.Sleep(100);
                                    string ConsulNovedad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]");
                                    Thread.Sleep(100);
                                    if (ConsulNovedad != ConsulNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNovedadEsp + " y el encontrado es: " + ConsulNovedad);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmConviaLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmConviaLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);                                    

                                    selenium.Screenshot("Listado de Comisiones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblModAcad')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblModAcad')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCtpreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCtpreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);                                    

                                    selenium.Screenshot("Maestro de Preliquidación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /*selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);*/

                                    /*/////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }*/

                                    //selenium.Click("//div[@id='printable']/div/div/div/select");
                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(500);
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Screenshot("TAB", true, file);

                                        Thread.Sleep(100);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCtrreHNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCtrreHNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Histórico de Horas Trabajadas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCueapANTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCueapANTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["SelecCuentaEsp"].ToString().Length != 0 && rows["SelecCuentaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string SelecCuentaEsp = rows["SelecCuentaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Mi Información de Cuentas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seleccione Tipo Cuenta a Cambiar", true, file);

                                    Thread.Sleep(100);
                                    string SelecCuenta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEnti')]");
                                    Thread.Sleep(100);
                                    if (SelecCuenta != SelecCuentaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SelecCuentaEsp + " y el encontrado es: " + SelecCuenta);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmCuentANTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmCuentANTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["SelecCuentaEsp"].ToString().Length != 0 && rows["SelecCuentaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string SelecCuentaEsp = rows["SelecCuentaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Cambiar Cuenta", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seleccione Tipo Cuenta a Cambiar", true, file);

                                    Thread.Sleep(100);
                                    string SelecCuenta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEnti')]");
                                    Thread.Sleep(100);
                                    if (SelecCuenta != SelecCuentaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SelecCuentaEsp + " y el encontrado es: " + SelecCuenta);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmDeReteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmDeReteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["FechaVigEsp"].ToString().Length != 0 && rows["FechaVigEsp"].ToString() != null &&
                                rows["ValDeducEsp"].ToString().Length != 0 && rows["ValDeducEsp"].ToString() != null &&
                                rows["FechaVig2Esp"].ToString().Length != 0 && rows["FechaVig2Esp"].ToString() != null &&
                                rows["ValDeduc2Esp"].ToString().Length != 0 && rows["ValDeduc2Esp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string FechaVigEsp = rows["FechaVigEsp"].ToString();
                                string ValDeducEsp = rows["ValDeducEsp"].ToString();
                                string FechaVig2Esp = rows["FechaVig2Esp"].ToString();
                                string ValDeduc2Esp = rows["ValDeduc2Esp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Disminución", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecVige_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Vigencia", true, file);

                                    Thread.Sleep(100);
                                    string FechaVig = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecVige_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaVig != FechaVigEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaVigEsp + " y el encontrado es: " + FechaVig);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValDirf')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Deducible", true, file);

                                    Thread.Sleep(100);
                                    string ValDeduc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValDirf')]");
                                    Thread.Sleep(100);
                                    if (ValDeduc != ValDeducEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValDeducEsp + " y el encontrado es: " + ValDeduc);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlVigSalu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Vigencia 2", true, file);

                                    Thread.Sleep(100);
                                    string FechaVig2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlVigSalu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaVig2 != FechaVig2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaVig2Esp + " y el encontrado es: " + FechaVig2);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValSalu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Deducible 2", true, file);

                                    Thread.Sleep(100);
                                    string ValDeduc2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValSalu')]");
                                    Thread.Sleep(100);
                                    if (ValDeduc2 != ValDeduc2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValDeduc2Esp + " y el encontrado es: " + ValDeduc2);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmDesprILNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmDesprILNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GenerarEsp"].ToString().Length != 0 && rows["GenerarEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GenerarEsp = rows["GenerarEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Desprendible", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Nuevo
                                    //string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    //Thread.Sleep(100);
                                    //if (Nuevo != NuevoEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Generar
                                    string Generar = selenium.EmergenteBotones("ctl00_btnGenerar");
                                    Thread.Sleep(100);
                                    if (Generar != GenerarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GenerarEsp + " y el encontrado es: " + Generar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroContra')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroContra')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecDesd')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecDesd')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmDisrfNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmDisrfNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["IngresosAnteEsp"].ToString().Length != 0 && rows["IngresosAnteEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string IngresosAnteEsp = rows["IngresosAnteEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Disminución de Retención", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cod. Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInter = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlVigDecl_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlVigDecl_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ingresos Totales Año Anterior", true, file);

                                    Thread.Sleep(100);
                                    string IngresosAnte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(100);
                                    if (IngresosAnte != IngresosAnteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IngresosAnteEsp + " y el encontrado es: " + IngresosAnte);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmFacSalaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmFacSalaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["TipVinEsp"].ToString().Length != 0 && rows["TipVinEsp"].ToString() != null &&
                                rows["TipEmpleEsp"].ToString().Length != 0 && rows["TipEmpleEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string TipVinEsp = rows["TipVinEsp"].ToString();
                                string TipEmpleEsp = rows["TipEmpleEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Factores Salariales Incentivos y Prestaciones Sociales", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipVinc')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Vinculación", true, file);

                                    Thread.Sleep(100);
                                    string TipVin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipVinc')]");
                                    Thread.Sleep(100);
                                    if (TipVin != TipVinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipVinEsp + " y el encontrado es: " + TipVin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Empleado", true, file);

                                    Thread.Sleep(100);
                                    string TipEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEmpl')]");
                                    Thread.Sleep(100);
                                    if (TipEmple != TipEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipEmpleEsp + " y el encontrado es: " + TipEmple);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmHCtrrNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmHCtrrNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Histórico Marcaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NroContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmHiCarNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmHiCarNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["TiempoSerEsp"].ToString().Length != 0 && rows["TiempoSerEsp"].ToString() != null &&
                                rows["SalarioEsp"].ToString().Length != 0 && rows["SalarioEsp"].ToString() != null &&
                                rows["SubProcesoEsp"].ToString().Length != 0 && rows["SubProcesoEsp"].ToString() != null &&
                                rows["TipoContrEsp"].ToString().Length != 0 && rows["TipoContrEsp"].ToString() != null &&
                                rows["MotivoRetEsp"].ToString().Length != 0 && rows["MotivoRetEsp"].ToString() != null &&
                                rows["JefeInmeEsp"].ToString().Length != 0 && rows["JefeInmeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string DependenciaEsp = rows["DependenciaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string TiempoSerEsp = rows["TiempoSerEsp"].ToString();
                                string SalarioEsp = rows["SalarioEsp"].ToString();
                                string SubProcesoEsp = rows["SubProcesoEsp"].ToString();
                                string TipoContrEsp = rows["TipoContrEsp"].ToString();
                                string MotivoRetEsp = rows["MotivoRetEsp"].ToString();
                                string JefeInmeEsp = rows["JefeInmeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //if (database == "ORA")
                                    //{
                                    //    selenium.Click("//a[contains(.,'Cerrar')]");
                                    //    Thread.Sleep(2000);
                                    //}

                                    selenium.Screenshot("Mi Experiencia DIAN", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCargo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCargo')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dependencia", true, file);

                                    Thread.Sleep(100);
                                    string Dependencia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(100);
                                    if (Dependencia != DependenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependenciaEsp + " y el encontrado es: " + Dependencia);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ0')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ1')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tiempo de Servicio", true, file);

                                    Thread.Sleep(100);
                                    string TiempoSer = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTieServ')]");
                                    Thread.Sleep(100);
                                    if (TiempoSer != TiempoSerEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TiempoSerEsp + " y el encontrado es: " + TiempoSer);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Salario", true, file);

                                    Thread.Sleep(100);
                                    string Salario = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti0')]");
                                    Thread.Sleep(100);
                                    if (Salario != SalarioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalarioEsp + " y el encontrado es: " + Salario);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Subproceso", true, file);

                                    Thread.Sleep(100);
                                    string SubProceso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti1')]");
                                    Thread.Sleep(100);
                                    if (SubProceso != SubProcesoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SubProcesoEsp + " y el encontrado es: " + SubProceso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string TipoContr = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti2')]");
                                    Thread.Sleep(100);
                                    if (TipoContr != TipoContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoContrEsp + " y el encontrado es: " + TipoContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo Retiro", true, file);

                                    Thread.Sleep(100);
                                    string MotivoRet = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti3')]");
                                    Thread.Sleep(100);
                                    if (MotivoRet != MotivoRetEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoRetEsp + " y el encontrado es: " + MotivoRet);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti4')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Inmediato", true, file);

                                    Thread.Sleep(100);
                                    string JefeInme = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdenti4')]");
                                    Thread.Sleep(100);
                                    if (JefeInme != JefeInmeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeInmeEsp + " y el encontrado es: " + JefeInme);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmLegCesaTradNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmLegCesaTradNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ContratoEsp"].ToString().Length != 0 && rows["ContratoEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ContratoEsp = rows["ContratoEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Legalización Solicitudes de Cesantías Tradicional", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Contrato", true, file);

                                    Thread.Sleep(100);
                                    string Contrato = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (Contrato != ContratoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContratoEsp + " y el encontrado es: " + Contrato);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Id = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmMarasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmMarasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CargarEsp"].ToString().Length != 0 && rows["CargarEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CargarEsp = rows["CargarEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Entradas y Salidas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Cargar
                                    string Cargar = selenium.EmergenteBotones("ctl00_btnCargar");
                                    Thread.Sleep(100);
                                    if (Cargar != CargarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + CargarEsp + " y el encontrado es: " + Cargar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecMarc_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Marcación", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecMarc_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmMovcoLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmMovcoLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsuIdEsp"].ToString().Length != 0 && rows["ConsuIdEsp"].ToString() != null &&
                                rows["ConsuNomEsp"].ToString().Length != 0 && rows["ConsuNomEsp"].ToString() != null &&
                                rows["ConsuApeEsp"].ToString().Length != 0 && rows["ConsuApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsuIdEsp = rows["ConsuIdEsp"].ToString();
                                string ConsuNomEsp = rows["ConsuNomEsp"].ToString();
                                string ConsuApeEsp = rows["ConsuApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Certificación Cumplimiento - IDU", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Cargar
                                    //string Cargar = selenium.EmergenteBotones("ctl00_btnCargar");
                                    //Thread.Sleep(100);
                                    //if (Cargar != CargarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + CargarEsp + " y el encontrado es: " + Cargar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /*selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsuId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuId != ConsuIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuIdEsp + " y el encontrado es: " + ConsuId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsuNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuNom != ConsuNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuNomEsp + " y el encontrado es: " + ConsuNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsuApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuApe != ConsuApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuApeEsp + " y el encontrado es: " + ConsuApe);
                                    }
                                    Thread.Sleep(100);
                                    */
                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmMovRepoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmMovRepoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsuIdEsp"].ToString().Length != 0 && rows["ConsuIdEsp"].ToString() != null &&
                                rows["ConsuNomEsp"].ToString().Length != 0 && rows["ConsuNomEsp"].ToString() != null &&
                                rows["ConsuApeEsp"].ToString().Length != 0 && rows["ConsuApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsuIdEsp = rows["ConsuIdEsp"].ToString();
                                string ConsuNomEsp = rows["ConsuNomEsp"].ToString();
                                string ConsuApeEsp = rows["ConsuApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Certificado de Cumplimiento Informe de Gestión del Contratista", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Cargar
                                    //string Cargar = selenium.EmergenteBotones("ctl00_btnCargar");
                                    //Thread.Sleep(100);
                                    //if (Cargar != CargarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + CargarEsp + " y el encontrado es: " + Cargar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Identificación", true, file);

                                    Thread.Sleep(100);
                                    string ConsuId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuId != ConsuIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuIdEsp + " y el encontrado es: " + ConsuId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsuNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuNom != ConsuNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuNomEsp + " y el encontrado es: " + ConsuNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsuApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsuApe != ConsuApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuApeEsp + " y el encontrado es: " + ConsuApe);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////                                    
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmMplesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmMplesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GenerarEsp"].ToString().Length != 0 && rows["GenerarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GenerarEsp = rows["GenerarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Plan de Estimulos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(100);

                                    ////Validación emergentes Boton Cargar
                                    //string Cargar = selenium.EmergenteBotones("ctl00_btnCargar");
                                    //Thread.Sleep(100);
                                    //if (Cargar != CargarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + CargarEsp + " y el encontrado es: " + Cargar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación emergentes Boton Generar
                                    string Generar = selenium.EmergenteBotones("ctl00_btnGenerar");
                                    Thread.Sleep(100);
                                    if (Generar != GenerarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GenerarEsp + " y el encontrado es: " + Generar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Nro. Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    selenium.ValTabs(file);

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmNovteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmNovteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["TipoNovedadEsp"].ToString().Length != 0 && rows["TipoNovedadEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["ValCuotaEsp"].ToString().Length != 0 && rows["ValCuotaEsp"].ToString() != null &&
                                rows["NroCuotasEsp"].ToString().Length != 0 && rows["NroCuotasEsp"].ToString() != null &&
                                rows["ValTotalEsp"].ToString().Length != 0 && rows["ValTotalEsp"].ToString() != null &&
                                rows["SalNovedadEsp"].ToString().Length != 0 && rows["SalNovedadEsp"].ToString() != null &&
                                rows["FechaPagoEsp"].ToString().Length != 0 && rows["FechaPagoEsp"].ToString() != null &&
                                rows["FechaNoveEsp"].ToString().Length != 0 && rows["FechaNoveEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string TipoNovedadEsp = rows["TipoNovedadEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string ValCuotaEsp = rows["ValCuotaEsp"].ToString();
                                string NroCuotasEsp = rows["NroCuotasEsp"].ToString();
                                string ValTotalEsp = rows["ValTotalEsp"].ToString();
                                string SalNovedadEsp = rows["SalNovedadEsp"].ToString();
                                string FechaPagoEsp = rows["FechaPagoEsp"].ToString();
                                string FechaNoveEsp = rows["FechaNoveEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        if (selenium.ExistControl("//a[contains(@id,'btnCerrar')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'btnCerrar')]");
                                            Thread.Sleep(10000);
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        continue;
                                    }

                                    selenium.Screenshot("Horas Extras", true, file);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Nro. Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string Concepto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]", "Concepto", file);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + Concepto);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNovedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]", "Tipo de Novedad", file);
                                    if (TipoNovedad != TipoNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovedadEsp + " y el encontrado es: " + TipoNovedad);
                                    }
                                    Thread.Sleep(100);

                                    string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]", "Cantidad", file);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    string ValCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]", "Valor Cuota", file);
                                    if (ValCuota != ValCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCuotaEsp + " y el encontrado es: " + ValCuota);
                                    }
                                    Thread.Sleep(100);

                                    string NroCuotas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]", "Nro. Cuotas", file);
                                    if (NroCuotas != NroCuotasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroCuotasEsp + " y el encontrado es: " + NroCuotas);
                                    }
                                    Thread.Sleep(100);

                                    string ValTotal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]", "Valor Total", file);
                                    if (ValTotal != ValTotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValTotalEsp + " y el encontrado es: " + ValTotal);
                                    }
                                    Thread.Sleep(100);

                                    string SalNovedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]", "Saldo Novedad", file);
                                    if (SalNovedad != SalNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalNovedadEsp + " y el encontrado es: " + SalNovedad);
                                    }
                                    Thread.Sleep(100);

                                    string FechaPago = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPago_lblFecha')]", "Fecha de Pago", file);
                                    if (FechaPago != FechaPagoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaPagoEsp + " y el encontrado es: " + FechaPago);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNove = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReal_lblFecha')]", "Fecha de Novedad", file);
                                    if (FechaNove != FechaNoveEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNoveEsp + " y el encontrado es: " + FechaNove);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmNovteDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmNovteDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["TipoNovedadEsp"].ToString().Length != 0 && rows["TipoNovedadEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["ValCuotaEsp"].ToString().Length != 0 && rows["ValCuotaEsp"].ToString() != null &&
                                rows["NroCuotasEsp"].ToString().Length != 0 && rows["NroCuotasEsp"].ToString() != null &&
                                rows["ValTotalEsp"].ToString().Length != 0 && rows["ValTotalEsp"].ToString() != null &&
                                rows["SalNovedadEsp"].ToString().Length != 0 && rows["SalNovedadEsp"].ToString() != null &&
                                rows["FechaPagoEsp"].ToString().Length != 0 && rows["FechaPagoEsp"].ToString() != null &&
                                rows["FechaNoveEsp"].ToString().Length != 0 && rows["FechaNoveEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string TipoNovedadEsp = rows["TipoNovedadEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string ValCuotaEsp = rows["ValCuotaEsp"].ToString();
                                string NroCuotasEsp = rows["NroCuotasEsp"].ToString();
                                string ValTotalEsp = rows["ValTotalEsp"].ToString();
                                string SalNovedadEsp = rows["SalNovedadEsp"].ToString();
                                string FechaPagoEsp = rows["FechaPagoEsp"].ToString();
                                string FechaNoveEsp = rows["FechaNoveEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(10000);

                                    selenium.Screenshot("Mis Solicitudes de Horas Extras", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Nro. Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string Concepto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]", "Concepto", file);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + Concepto);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNovedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]", "Tipo de Novedad", file);
                                    if (TipoNovedad != TipoNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovedadEsp + " y el encontrado es: " + TipoNovedad);
                                    }
                                    Thread.Sleep(100);

                                    string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]", "Cantidad", file);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    string ValCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]", "Valor Cuota", file);
                                    if (ValCuota != ValCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCuotaEsp + " y el encontrado es: " + ValCuota);
                                    }
                                    Thread.Sleep(100);

                                    string NroCuotas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]", "Nro. Cuotas", file);
                                    if (NroCuotas != NroCuotasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroCuotasEsp + " y el encontrado es: " + NroCuotas);
                                    }
                                    Thread.Sleep(100);

                                    string ValTotal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]", "Valor Total", file);
                                    if (ValTotal != ValTotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValTotalEsp + " y el encontrado es: " + ValTotal);
                                    }
                                    Thread.Sleep(100);

                                    string SalNovedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]", "Saldo Novedad", file);
                                    if (SalNovedad != SalNovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalNovedadEsp + " y el encontrado es: " + SalNovedad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string FechaPago = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPago_lblFecha')]", "Fecha de Pago", file);
                                    if (FechaPago != FechaPagoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaPagoEsp + " y el encontrado es: " + FechaPago);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNove = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReal_lblFecha')]", "Fecha de Novedad", file);
                                    if (FechaNove != FechaNoveEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNoveEsp + " y el encontrado es: " + FechaNove);
                                    }
                                    Thread.Sleep(100);

                                    string Observa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_txtObsErvaSoli_lblTexto')]", "Observaciones", file);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }


                                    /////////// Validación TABS ////////
                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 25; i++) Keyboard.SendKeys("{UP}");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    Thread.Sleep(1000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmOpreNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmOpreNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEmplEsp"].ToString().Length != 0 && rows["IdEmplEsp"].ToString() != null &&
                                rows["ConsuNomEsp"].ToString().Length != 0 && rows["ConsuNomEsp"].ToString() != null &&
                                rows["ConsuApeEsp"].ToString().Length != 0 && rows["ConsuApeEsp"].ToString() != null &&
                                rows["FechaIniAEsp"].ToString().Length != 0 && rows["FechaIniAEsp"].ToString() != null &&
                                rows["FechaIniMEsp"].ToString().Length != 0 && rows["FechaIniMEsp"].ToString() != null &&
                                rows["HoraIniEsp"].ToString().Length != 0 && rows["HoraIniEsp"].ToString() != null &&
                                rows["HoraFinEsp"].ToString().Length != 0 && rows["HoraFinEsp"].ToString() != null &&
                                rows["MotivoEsp"].ToString().Length != 0 && rows["MotivoEsp"].ToString() != null &&
                                rows["CodConceptoEsp"].ToString().Length != 0 && rows["CodConceptoEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["JustificaEsp"].ToString().Length != 0 && rows["JustificaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEmplEsp = rows["IdEmplEsp"].ToString();
                                string ConsuNomEsp = rows["ConsuNomEsp"].ToString();
                                string ConsuApeEsp = rows["ConsuApeEsp"].ToString();
                                string FechaIniAEsp = rows["FechaIniAEsp"].ToString();
                                string FechaIniMEsp = rows["FechaIniMEsp"].ToString();
                                string HoraIniEsp = rows["HoraIniEsp"].ToString();
                                string HoraFinEsp = rows["HoraFinEsp"].ToString();
                                string MotivoEsp = rows["MotivoEsp"].ToString();
                                string CodConceptoEsp = rows["CodConceptoEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string JustificaEsp = rows["JustificaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(6000);

                                    if (database == "SQL")
                                    {
                                        selenium.Screenshot("Error Ventana", true, file);

                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(10000);
                                    }

                                    selenium.Screenshot("Registro Orden Previa Horas Extras", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    if (database == "SQL")
                                    {
                                        //Validación Emergentes campos
                                        string ConsuId = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_lblConsuCedEmpl']", "Consultar Por Identificación", file);
                                        if (ConsuId != IdEmplEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEmplEsp + " y el encontrado es: " + ConsuId);
                                        }
                                        Thread.Sleep(100);

                                        string ConsuNom = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_lblConsuNomEmpl']", "Consultar Por Nombres", file);
                                        if (ConsuNom != ConsuNomEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuNomEsp + " y el encontrado es: " + ConsuNom);
                                        }
                                        Thread.Sleep(100);

                                        string ConsuApe = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_lblConsuAplEmpl']", "Consultar Por Apellidos", file);
                                        if (ConsuApe != ConsuApeEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuApeEsp + " y el encontrado es: " + ConsuApe);
                                        }
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        string FechaIniA = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInicA')]", "Fecha Inicio Año", file);
                                        if (FechaIniA != FechaIniAEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniAEsp + " y el encontrado es: " + FechaIniA);
                                        }
                                        Thread.Sleep(100);

                                        string FechaIniM = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInicM')]", "Fecha Inicio Mes", file);
                                        if (FechaIniM != FechaIniMEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniMEsp + " y el encontrado es: " + FechaIniM);
                                        }
                                        Thread.Sleep(100);

                                        string HoraIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblHorInic')]", "Hora Inicio", file);
                                        if (HoraIni != HoraIniEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraIniEsp + " y el encontrado es: " + HoraIni);
                                        }
                                        Thread.Sleep(100);

                                        string HoraFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblHorFina')]", "Hora Final", file);
                                        if (HoraFin != HoraFinEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinEsp + " y el encontrado es: " + HoraFin);
                                        }
                                        Thread.Sleep(100);

                                        string Motivo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMhoe')]", "Motivo", file);
                                        if (Motivo != MotivoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoEsp + " y el encontrado es: " + Motivo);
                                        }
                                        Thread.Sleep(100);

                                        string CodConcepto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodConc')]", "Codigo de Concepto", file);
                                        if (CodConcepto != CodConceptoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodConceptoEsp + " y el encontrado es: " + CodConcepto);
                                        }
                                        Thread.Sleep(100);

                                        string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanTida')]", "Cantidad (H,M)", file);
                                        if (Cantidad != CantidadEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                        }
                                        Thread.Sleep(100);

                                        string Justifica = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_lblTexto')]", "Justificacion", file);
                                        if (Justifica != JustificaEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JustificaEsp + " y el encontrado es: " + Justifica);
                                        }
                                        Thread.Sleep(100);
                                    }

                                    /////////// Validación TABS ////////
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        //selenium.Click("//a[contains(.,'Cerrar')]");
                                        //Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        String id = pageEle.GetAttribute("id");
                                                        if (id == "ctl00_ContenidoPagina_KCtrlFecExpe_txtFecha" || id == "ctl00_ContenidoPagina_KCtrlFecNaci_txtFecha" || id == "ctl00_ContenidoPagina_txtDirResi" || id == "ctl00_ContenidoPagina_KCtrlFecGrad_txtFecha ")
                                                        {
                                                            //errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        }

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        Keyboard.SendKeys("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmOpreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmOpreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NuevoEsp"].ToString().Length != 0 && rows["NuevoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsuIdEsp"].ToString().Length != 0 && rows["ConsuIdEsp"].ToString() != null &&
                                rows["ConsuNomEsp"].ToString().Length != 0 && rows["ConsuNomEsp"].ToString() != null &&
                                rows["ConsuApeEsp"].ToString().Length != 0 && rows["ConsuApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NuevoEsp = rows["NuevoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsuIdEsp = rows["ConsuIdEsp"].ToString();
                                string ConsuNomEsp = rows["ConsuNomEsp"].ToString();
                                string ConsuApeEsp = rows["ConsuApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Screenshot("Ventana Error", true, file);

                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro Orden Previa Horas Extras", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Nuevo
                                    string Nuevo = selenium.EmergenteBotones("ctl00_btnNuevo");
                                    Thread.Sleep(100);
                                    if (Nuevo != NuevoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + NuevoEsp + " y el encontrado es: " + Nuevo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /*string ConsuId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (ConsuId != ConsuIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuIdEsp + " y el encontrado es: " + ConsuId);
                                    }
                                    Thread.Sleep(100);

                                    string ConsuNom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    if (ConsuNom != ConsuNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuNomEsp + " y el encontrado es: " + ConsuNom);
                                    }
                                    Thread.Sleep(100);

                                    string ConsuApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (ConsuApe != ConsuApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsuApeEsp + " y el encontrado es: " + ConsuApe);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    //Debugger.Launch();
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        var valor = SthCount.GetType();
                                        //int StCount = Int32.Parse(SthCount);
                                        int StCount = Convert.ToInt32(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        var valor = SthCount.GetType();
                                        //int StCount = Int32.Parse(SthCount);
                                        int StCount = Convert.ToInt32(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmOpreONTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmOpreONTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("orpre frmNmOpreO", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Nro. de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costos", file);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmProaColaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmProaColaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Proalimentación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmProcMarcaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmProcMarcaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Validación de Marcaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]", "Fecha Inicial", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmProvaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmProvaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["TotDiasEsp"].ToString().Length != 0 && rows["TotDiasEsp"].ToString() != null &&
                                rows["DiasPenEsp"].ToString().Length != 0 && rows["DiasPenEsp"].ToString() != null &&
                                rows["DiasTimeEsp"].ToString().Length != 0 && rows["DiasTimeEsp"].ToString() != null &&
                                rows["DiasDineroEsp"].ToString().Length != 0 && rows["DiasDineroEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["FechaRegrEsp"].ToString().Length != 0 && rows["FechaRegrEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string TotDiasEsp = rows["TotDiasEsp"].ToString();
                                string DiasPenEsp = rows["DiasPenEsp"].ToString();
                                string DiasTimeEsp = rows["DiasTimeEsp"].ToString();
                                string DiasDineroEsp = rows["DiasDineroEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string FechaRegrEsp = rows["FechaRegrEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Vacaciones Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    if (database == "SQL")
                                    {
                                        for (int i = 0; i < 16; i++)
                                        {
                                            Keyboard.SendKeys("{DOWN}");
                                        }
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        for (int i = 0; i < 6; i++)
                                        {
                                            Keyboard.SendKeys("{DOWN}");
                                        }
                                        Thread.Sleep(100);
                                    }


                                    string TotDias = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaAcum')]", "Total Días Disponibles", file);
                                    if (TotDias != TotDiasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotDiasEsp + " y el encontrado es: " + TotDias);
                                    }
                                    Thread.Sleep(100);

                                    string DiasPen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaPend')]", "Días Pendientes", file);
                                    if (DiasPen != DiasPenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasPenEsp + " y el encontrado es: " + DiasPen);
                                    }
                                    Thread.Sleep(100);

                                    string DiasTime = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaTomt')]", "Días en Tiempo", file);
                                    if (DiasTime != DiasTimeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasTimeEsp + " y el encontrado es: " + DiasTime);
                                    }
                                    Thread.Sleep(100);

                                    string DiasDinero = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaTomd')]", "Días en Dinero", file);
                                    if (DiasDinero != DiasDineroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasDineroEsp + " y el encontrado es: " + DiasDinero);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis1_lblFecha')]", "Fecha Desde", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis2_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string FechaRegr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRegr_lblFecha')]", "Fecha de Regreso", file);
                                    if (FechaRegr != FechaRegrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRegrEsp + " y el encontrado es: " + FechaRegr);
                                    }
                                    Thread.Sleep(100);

                                    string Observa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]", "Observaciones de la Solicitud", file);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    if (database == "SQL")
                                    {
                                        for (int i = 0; i < 16; i++)
                                        {
                                            Keyboard.SendKeys("{UP}");
                                        }
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        for (int i = 0; i < 6; i++)
                                        {
                                            Keyboard.SendKeys("{UP}");
                                        }
                                        Thread.Sleep(100);
                                    }

                                    /////////// Validación TABS ////////
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        String id = pageEle.GetAttribute("id");
                                                        if (id == "ctl00_ContenidoPagina_kcfFechaRegreso_txtFecha")
                                                        {
                                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        }

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        Keyboard.SendKeys("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmProvaRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmProvaR")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomEsp"].ToString().Length != 0 && rows["NomEsp"].ToString() != null &&
                                rows["ApeEsp"].ToString().Length != 0 && rows["ApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["TipContrEsp"].ToString().Length != 0 && rows["TipContrEsp"].ToString() != null &&
                                rows["TipSalEsp"].ToString().Length != 0 && rows["TipSalEsp"].ToString() != null &&
                                rows["FechaContrEsp"].ToString().Length != 0 && rows["FechaContrEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["CenTrabajoEsp"].ToString().Length != 0 && rows["CenTrabajoEsp"].ToString() != null &&
                                rows["CenCosEsp"].ToString().Length != 0 && rows["CenCosEsp"].ToString() != null &&
                                rows["ClaseNomEsp"].ToString().Length != 0 && rows["ClaseNomEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomEsp = rows["NomEsp"].ToString();
                                string ApeEsp = rows["ApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string TipContrEsp = rows["TipContrEsp"].ToString();
                                string TipSalEsp = rows["TipSalEsp"].ToString();
                                string FechaContrEsp = rows["FechaContrEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string CenTrabajoEsp = rows["CenTrabajoEsp"].ToString();
                                string CenCosEsp = rows["CenCosEsp"].ToString();
                                string ClaseNomEsp = rows["ClaseNomEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitud de vacaciones Reemplazo", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres", file);
                                    if (Nom != NomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEsp + " y el encontrado es: " + Nom);
                                    }
                                    Thread.Sleep(100);

                                    string Ape = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]", "Apellidos", file);
                                    if (Ape != ApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApeEsp + " y el encontrado es: " + Ape);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string TipContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipContr')]", "Tipo de Contrato", file);
                                    if (TipContr != TipContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipContrEsp + " y el encontrado es: " + TipContr);
                                    }
                                    Thread.Sleep(100);

                                    string TipSal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSala')]", "Tipo de Salario", file);
                                    if (TipSal != TipSalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipSalEsp + " y el encontrado es: " + TipSal);
                                    }
                                    Thread.Sleep(100);

                                    string FechaContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecCont')]", "Fecha de Contrato", file);
                                    if (FechaContr != FechaContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaContrEsp + " y el encontrado es: " + FechaContr);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string CenTrabajo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCenp')]", "Centro de Trabajo", file);
                                    if (CenTrabajo != CenTrabajoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenTrabajoEsp + " y el encontrado es: " + CenTrabajo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }
                                    Thread.Sleep(100);


                                    string CenCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costo", file);
                                    if (CenCos != CenCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenCosEsp + " y el encontrado es: " + CenCos);
                                    }
                                    Thread.Sleep(100);

                                    string ClaseNom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTnom')]", "Clase de Nomina", file);
                                    if (ClaseNom != ClaseNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaseNomEsp + " y el encontrado es: " + ClaseNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmProvaSdNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmProvaSdNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomEsp"].ToString().Length != 0 && rows["NomEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["TotDisponiEsp"].ToString().Length != 0 && rows["TotDisponiEsp"].ToString() != null &&
                                rows["DiasPendEsp"].ToString().Length != 0 && rows["DiasPendEsp"].ToString() != null &&
                                rows["DiasTiempoEsp"].ToString().Length != 0 && rows["DiasTiempoEsp"].ToString() != null &&
                                rows["DiasDineroEsp"].ToString().Length != 0 && rows["DiasDineroEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomEsp = rows["NomEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string TotDisponiEsp = rows["TotDisponiEsp"].ToString();
                                string DiasPendEsp = rows["DiasPendEsp"].ToString();
                                string DiasTiempoEsp = rows["DiasTiempoEsp"].ToString();
                                string DiasDineroEsp = rows["DiasDineroEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Vacaciones en Dineros", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (Nom != NomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEsp + " y el encontrado es: " + Nom);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string TotDisponi = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaAcum')]", "Total Días Disponibles", file);
                                    if (TotDisponi != TotDisponiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotDisponiEsp + " y el encontrado es: " + TotDisponi);
                                    }
                                    Thread.Sleep(100);

                                    string DiasPend = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaPend')]", "Días Pendinetes", file);
                                    if (DiasPend != DiasPendEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasPendEsp + " y el encontrado es: " + DiasPend);
                                    }
                                    Thread.Sleep(100);

                                    /*string DiasTiempo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaTomt')]", "Días en Tiempo", file);
                                    if (DiasTiempo != DiasTiempoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasTiempoEsp + " y el encontrado es: " + DiasTiempo);
                                    }
                                    Thread.Sleep(100);*/

                                    string DiasDinero = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaTomd')]", "Días en Dinero", file);
                                    if (DiasDinero != DiasDineroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasDineroEsp + " y el encontrado es: " + DiasDinero);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        //String id = pageEle.GetAttribute("id");
                                                        //if (id == "ctl00_ContenidoPagina_KCtrlFecExpe_txtFecha" || id == "ctl00_ContenidoPagina_KCtrlFecNaci_txtFecha" || id == "ctl00_ContenidoPagina_txtDirResi" || id == "ctl00_ContenidoPagina_KCtrlFecGrad_txtFecha ")
                                                        //{
                                                        //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        //}

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        Keyboard.SendKeys("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmNmRepVacaLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmNmRepVacaLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//button[contains(@id,'pLider')]");
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Vacaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHAcRaempRDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHAcRaempRDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Ranking de los Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellido = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHBiEmplNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHBiEmplNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Datos Básicos - Colaboradores De la Compañia", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /*string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellido = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsultarCargo')]", "Consultar Por Código de Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    int cont = 0;
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                            if (cont == 7)
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHCoEncueLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHCoEncueLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Informe Encuestas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHConFormRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHConFormRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitudes Necesidades de Formación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellido = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHEd3coemLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHEd3coemLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Solicitudes Necesidades de Formación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmCompeRSNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmCompeRSNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["EmpleadoEsp"].ToString().Length != 0 && rows["EmpleadoEsp"].ToString() != null &&
                                rows["CentroCostoEsp"].ToString().Length != 0 && rows["CentroCostoEsp"].ToString() != null &&
                                rows["DeEsp"].ToString().Length != 0 && rows["DeEsp"].ToString() != null &&
                                rows["HastaEsp"].ToString().Length != 0 && rows["HastaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string EmpleadoEsp = rows["EmpleadoEsp"].ToString();
                                string CentroCostoEsp = rows["CentroCostoEsp"].ToString();
                                string DeEsp = rows["DeEsp"].ToString();
                                string HastaEsp = rows["HastaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Detallado de Sobretiempos Realizados", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar Por Jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string Empleado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar Por Empleado", file);
                                    if (Empleado != EmpleadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpleadoEsp + " y el encontrado es: " + Empleado);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCosto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCentroCosto')]", "Centro de Costo", file);
                                    if (CentroCosto != CentroCostoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostoEsp + " y el encontrado es: " + CentroCosto);
                                    }
                                    Thread.Sleep(100);

                                    string De = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "Consultar por fecha Desde", file);
                                    if (De != DeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DeEsp + " y el encontrado es: " + De);
                                    }
                                    Thread.Sleep(100);

                                    string Hasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Consultar por fecha Hasta", file);
                                    if (Hasta != HastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HastaEsp + " y el encontrado es: " + Hasta);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmHopreNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmHopreNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Programar Recuperación de Horas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmHopreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmHopreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Programar Recuperación del RRHH", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /* //Validación Emergentes campos
                                     string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identifiación", file);
                                     if (Id != IdEsp)
                                     {
                                         errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                     }
                                     Thread.Sleep(100);

                                     string Nombres = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                     if (Nombres != NombresEsp)
                                     {
                                         errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                     }
                                     Thread.Sleep(100);

                                     string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                     if (Apellidos != ApellidosEsp)
                                     {
                                         errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                     }
                                     Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmMplesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmMplesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["CanDereEsp"].ToString().Length != 0 && rows["CanDereEsp"].ToString() != null &&
                                rows["CanTiempoEsp"].ToString().Length != 0 && rows["CanTiempoEsp"].ToString() != null &&
                                rows["CanDineroEsp"].ToString().Length != 0 && rows["CanDineroEsp"].ToString() != null &&
                                rows["FechaDisEsp"].ToString().Length != 0 && rows["FechaDisEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string CanDereEsp = rows["CanDereEsp"].ToString();
                                string CanTiempoEsp = rows["CanTiempoEsp"].ToString();
                                string CanDineroEsp = rows["CanDineroEsp"].ToString();
                                string FechaDisEsp = rows["FechaDisEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Plan de estimulos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]", "Fecha Inicio", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]", "Fecha Fin", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string CanDere = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDere')]", "Cantidad Derecho", file);
                                    if (CanDere != CanDereEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CanDereEsp + " y el encontrado es: " + CanDere);
                                    }
                                    Thread.Sleep(100);

                                    string CanTiempo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanTiem')]", "Cantidad en Tiempo", file);
                                    if (CanTiempo != CanTiempoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CanTiempoEsp + " y el encontrado es: " + CanTiempo);
                                    }
                                    Thread.Sleep(100);

                                    string CanDinero = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDine')]", "Cantidad en Dinero", file);
                                    if (CanDinero != CanDineroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CanDineroEsp + " y el encontrado es: " + CanDinero);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDis = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_kcfFechaDisfrute_lblFecha')]", "Fecha Disfrute", file);
                                    if (FechaDis != FechaDisEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDisEsp + " y el encontrado es: " + FechaDis);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmNomarRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmNomarRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["MarcaEsp"].ToString().Length != 0 && rows["MarcaEsp"].ToString() != null &&
                                rows["ConsEmpleEsp"].ToString().Length != 0 && rows["ConsEmpleEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string MarcaEsp = rows["MarcaEsp"].ToString();
                                string ConsEmpleEsp = rows["ConsEmpleEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(2000);
                                    }

                                    selenium.Screenshot("Plan de estimulos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "De", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string Marca = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMarc')]", "Consultar Por Tipo de Marcación", file);
                                    if (Marca != MarcaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MarcaEsp + " y el encontrado es: " + Marca);
                                    }
                                    Thread.Sleep(100);

                                    string ConsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConsEmple != ConsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsEmpleEsp + " y el encontrado es: " + ConsEmple);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));                                  
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(1500);
                                        for (int i = 0; i < elementList.Count; i++)
                                        {
                                            try
                                            {
                                                var tab = elementList[i];
                                                tab.SendKeys(Keys.Tab);
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                            catch (Exception e)
                                            {
                                                var tab = elementList[i];
                                                selenium.Tab("//*[contains(@name,'ctl00$ContenidoPagina$')]");
                                                selenium.Screenshot("TAB", true, file);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmNomarRSNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmNomarRS")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["ConsEmpleEsp"].ToString().Length != 0 && rows["ConsEmpleEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string ConsEmpleEsp = rows["ConsEmpleEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Detallado de Ausencias por Recuperación", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "De", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string ConsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConsEmple != ConsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsEmpleEsp + " y el encontrado es: " + ConsEmple);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmNoveSNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmNoveSNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["ConsEmpleEsp"].ToString().Length != 0 && rows["ConsEmpleEsp"].ToString() != null &&
                                rows["MarcaEsp"].ToString().Length != 0 && rows["MarcaEsp"].ToString() != null &&
                                rows["NovedadEsp"].ToString().Length != 0 && rows["NovedadEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string ConsEmpleEsp = rows["ConsEmpleEsp"].ToString();
                                string MarcaEsp = rows["MarcaEsp"].ToString();
                                string NovedadEsp = rows["NovedadEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Ausencias e Inasistencias por Aprobar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "De", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string Marca = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMarc')]", "Consultar por Tipo de Marcación", file);
                                    if (Marca != MarcaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MarcaEsp + " y el encontrado es: " + Marca);
                                    }
                                    Thread.Sleep(100);

                                    string ConsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConsEmple != ConsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsEmpleEsp + " y el encontrado es: " + ConsEmple);
                                    }
                                    Thread.Sleep(100);

                                    string Novedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNOV_GENE')]", "Consultar por Novedad Generada", file);
                                    if (Novedad != NovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NovedadEsp + " y el encontrado es: " + Novedad);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmOpreDNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmOpreDNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["ConseEsp"].ToString().Length != 0 && rows["ConseEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["CenCosEsp"].ToString().Length != 0 && rows["CenCosEsp"].ToString() != null &&
                                rows["MotivoEsp"].ToString().Length != 0 && rows["MotivoEsp"].ToString() != null &&
                                rows["FechaRegEsp"].ToString().Length != 0 && rows["FechaRegEsp"].ToString() != null &&
                                rows["HoraIniEsp"].ToString().Length != 0 && rows["HoraIniEsp"].ToString() != null &&
                                rows["HoraFinEsp"].ToString().Length != 0 && rows["HoraFinEsp"].ToString() != null &&
                                rows["JustiEsp"].ToString().Length != 0 && rows["JustiEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string ConseEsp = rows["ConseEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string CenCosEsp = rows["CenCosEsp"].ToString();
                                string MotivoEsp = rows["MotivoEsp"].ToString();
                                string FechaRegEsp = rows["FechaRegEsp"].ToString();
                                string HoraIniEsp = rows["HoraIniEsp"].ToString();
                                string HoraFinEsp = rows["HoraFinEsp"].ToString();
                                string JustiEsp = rows["JustiEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Error Ventana", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Registro orden previa Horas Extras", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Conse = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsecutivo')]", "Consecutivo", file);
                                    if (Conse != ConseEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConseEsp + " y el encontrado es: " + Conse);
                                    }
                                    Thread.Sleep(100);

                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Número de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string CenCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costos", file);
                                    if (CenCos != CenCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenCosEsp + " y el encontrado es: " + CenCos);
                                    }
                                    Thread.Sleep(100);

                                    string Motivo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMhoe')]", "Motivo", file);
                                    if (Motivo != MotivoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoEsp + " y el encontrado es: " + Motivo);
                                    }
                                    Thread.Sleep(100);

                                    string FechaReg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecReg')]", "Fecha Registro", file);
                                    if (FechaReg != FechaRegEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRegEsp + " y el encontrado es: " + FechaReg);
                                    }
                                    Thread.Sleep(100);

                                    string HoraIni = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_lblHOR_inicio']", "Hora Inicio", file);
                                    if (HoraIni != HoraIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraIniEsp + " y el encontrado es: " + HoraIni);
                                    }
                                    Thread.Sleep(100);

                                    string HoraFin = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_lblHOR_final']", "Hora Final", file);
                                    if (HoraFin != HoraFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinEsp + " y el encontrado es: " + HoraFin);
                                    }
                                    Thread.Sleep(100);

                                    string Justi = selenium.CamposEmergentes("//span[@id='ctl00_ContenidoPagina_KCtrlTxtJustif_lblTexto']", "Justificación", file);
                                    if (Justi != JustiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JustiEsp + " y el encontrado es: " + Justi);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmOpreLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmOpreLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombresEsp"].ToString().Length != 0 && rows["NombresEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombresEsp = rows["NombresEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Solicitudes Ordenes Previas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombres = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar por Nombres", file);
                                    if (Nombres != NombresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombresEsp + " y el encontrado es: " + Nombres);
                                    }
                                    Thread.Sleep(100);

                                    string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar por Apellidos", file);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]", "Fecha Final", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmPrcomRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmPrcomRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CenCosEsp"].ToString().Length != 0 && rows["CenCosEsp"].ToString() != null &&
                                rows["ConEmpleEsp"].ToString().Length != 0 && rows["ConEmpleEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CenCosEsp = rows["CenCosEsp"].ToString();
                                string ConEmpleEsp = rows["ConEmpleEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Programación de Compensaciones por Aprobar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "Fecha Desde", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string CenCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCCos')]", "Consultar por Centro de Costo", file);
                                    if (CenCos != CenCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenCosEsp + " y el encontrado es: " + CenCos);
                                    }
                                    Thread.Sleep(100);

                                    string ConEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConEmple != ConEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConEmpleEsp + " y el encontrado es: " + ConEmple);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmSolipRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmSolipRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["ConsEmpleEsp"].ToString().Length != 0 && rows["ConsEmpleEsp"].ToString() != null &&
                                rows["MarcaEsp"].ToString().Length != 0 && rows["MarcaEsp"].ToString() != null &&
                                rows["NovedadEsp"].ToString().Length != 0 && rows["NovedadEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string ConsEmpleEsp = rows["ConsEmpleEsp"].ToString();
                                string MarcaEsp = rows["MarcaEsp"].ToString();
                                string NovedadEsp = rows["NovedadEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Ausencias, Inasistencias de Gestionar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "De", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string Marca = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMarc')]", "Consultar por Tipo de Marcación", file);
                                    if (Marca != MarcaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MarcaEsp + " y el encontrado es: " + Marca);
                                    }
                                    Thread.Sleep(100);

                                    string ConsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConsEmple != ConsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsEmpleEsp + " y el encontrado es: " + ConsEmple);
                                    }
                                    Thread.Sleep(100);

                                    string Novedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNOV_GENE')]", "Consultar por Novedad Generada", file);
                                    if (Novedad != NovedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NovedadEsp + " y el encontrado es: " + Novedad);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmSopfpRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmSopfpRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["ConsEmpleEsp"].ToString().Length != 0 && rows["ConsEmpleEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string ConsEmpleEsp = rows["ConsEmpleEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Solicitudes de Permanencias Fuera de Horario por Aprobar", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "Fecha Desde", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string ConsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar por Empleado", file);
                                    if (ConsEmple != ConsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsEmpleEsp + " y el encontrado es: " + ConsEmple);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNmTardnRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNmTardnRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["JefeEsp"].ToString().Length != 0 && rows["JefeEsp"].ToString() != null &&
                                rows["FechaDeEsp"].ToString().Length != 0 && rows["FechaDeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["ConsProtoEsp"].ToString().Length != 0 && rows["ConsProtoEsp"].ToString() != null &&
                                rows["ConsNoveEsp"].ToString().Length != 0 && rows["ConsNoveEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string JefeEsp = rows["JefeEsp"].ToString();
                                string FechaDeEsp = rows["FechaDeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string ConsProtoEsp = rows["ConsProtoEsp"].ToString();
                                string ConsNoveEsp = rows["ConsNoveEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Consultas de Tardanzas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Jefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar por jefe", file);
                                    if (Jefe != JefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeEsp + " y el encontrado es: " + Jefe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcD_lblFecha')]", "Fecha Desde", file);
                                    if (FechaDe != FechaDeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDeEsp + " y el encontrado es: " + FechaDe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConFecMarcH_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string ConsProto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblGrupro')]", "Consultar por Grupo de Prototipo", file);
                                    if (ConsProto != ConsProtoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsProtoEsp + " y el encontrado es: " + ConsProto);
                                    }
                                    Thread.Sleep(100);

                                    string ConsNove = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNOV_GENE')]", "Consultar por Novedad Generada", file);
                                    if (ConsNove != ConsNoveEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsNoveEsp + " y el encontrado es: " + ConsNove);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNovteAproNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNovteAproNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["VendorEsp"].ToString().Length != 0 && rows["VendorEsp"].ToString() != null &&
                                rows["LocacionEsp"].ToString().Length != 0 && rows["LocacionEsp"].ToString() != null &&
                                rows["MesEsp"].ToString().Length != 0 && rows["MesEsp"].ToString() != null &&
                                rows["QuincenaEsp"].ToString().Length != 0 && rows["QuincenaEsp"].ToString() != null &&
                                rows["CenCosEsp"].ToString().Length != 0 && rows["CenCosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string VendorEsp = rows["VendorEsp"].ToString();
                                string LocacionEsp = rows["LocacionEsp"].ToString();
                                string MesEsp = rows["MesEsp"].ToString();
                                string QuincenaEsp = rows["QuincenaEsp"].ToString();
                                string CenCosEsp = rows["CenCosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Aprobación de Novedades", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Vendor = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblVendor')]", "Vendor", file);
                                    if (Vendor != VendorEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VendorEsp + " y el encontrado es: " + Vendor);
                                    }
                                    Thread.Sleep(100);

                                    string Locacion = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblLocacion')]", "Locación", file);
                                    if (Locacion != LocacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LocacionEsp + " y el encontrado es: " + Locacion);
                                    }
                                    Thread.Sleep(100);

                                    string Mes = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMesNov')]", "Mes", file);
                                    if (Mes != MesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MesEsp + " y el encontrado es: " + Mes);
                                    }
                                    Thread.Sleep(100);

                                    string Quincena = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblQuinNov')]", "Quincena", file);
                                    if (Quincena != QuincenaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + QuincenaEsp + " y el encontrado es: " + Quincena);
                                    }
                                    Thread.Sleep(100);

                                    string CenCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]", "Centro de Costo", file);
                                    if (CenCos != CenCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenCosEsp + " y el encontrado es: " + CenCos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHNovteAproLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHNovteAproLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte de Aprobación de Novedades", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHSlInducNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHSlInducNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Inducción Colaborador", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    /*//Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);*/

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHSlInducRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHSlInducRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Inducciones de los colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHWfNflujLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHWfNflujLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&
                                rows["TipoWorkEsp"].ToString().Length != 0 && rows["TipoWorkEsp"].ToString() != null &&
                                rows["PasosFlujoEsp"].ToString().Length != 0 && rows["PasosFlujoEsp"].ToString() != null &&
                                rows["TipoWork2Esp"].ToString().Length != 0 && rows["TipoWork2Esp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();
                                string TipoWorkEsp = rows["TipoWorkEsp"].ToString();
                                string PasosFlujoEsp = rows["PasosFlujoEsp"].ToString();
                                string TipoWork2Esp = rows["TipoWork2Esp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Inducciones de los colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string TipoWork = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodFluj')]", "Tipo de Workflow", file);
                                    if (TipoWork != TipoWorkEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoWorkEsp + " y el encontrado es: " + TipoWork);
                                    }
                                    Thread.Sleep(100);

                                    string PasosFlujo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodProc')]", "Pasos del Flujo", file);
                                    if (PasosFlujo != PasosFlujoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PasosFlujoEsp + " y el encontrado es: " + PasosFlujo);
                                    }
                                    Thread.Sleep(100);

                                    string TipoWork2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstTare')]", "Tipo de Workflow", file);
                                    if (TipoWork2 != TipoWork2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoWork2Esp + " y el encontrado es: " + TipoWork2);
                                    }
                                    Thread.Sleep(100);

                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodResp')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]", "Nombre", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellido = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]", "Apellido", file);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHWfNtareNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHWfNtareNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["ContrEsp"].ToString().Length != 0 && rows["ContrEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string ContrEsp = rows["ContrEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Tareas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Contr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNonFluj')]", "Contrato Empleado", file);
                                    if (Contr != ContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContrEsp + " y el encontrado es: " + Contr);
                                    }
                                    Thread.Sleep(100);

                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identifiación Empleado", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomEmpl = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Empleado", file);
                                    if (NomEmpl != NomEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmplEsp + " y el encontrado es: " + NomEmpl);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmSlInducRNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmSlInducRNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidosEsp"].ToString().Length != 0 && rows["ApellidosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidosEsp = rows["ApellidosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Inducciones de los Colaboradores", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string Nombre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "", file);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    string Apellidos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar Por Apellidos", file);
                                    if (Apellidos != ApellidosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidosEsp + " y el encontrado es: " + Apellidos);
                                    }
                                    Thread.Sleep(100);

                                    ///////////// Validación TABS ////////
                                    selenium.ValTabs(file);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmSolVacEcuaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            ////TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmSolVacEcuaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["TotDiasEsp"].ToString().Length != 0 && rows["TotDiasEsp"].ToString() != null &&
                                rows["DiasPenEsp"].ToString().Length != 0 && rows["DiasPenEsp"].ToString() != null &&
                                rows["DiasTomEsp"].ToString().Length != 0 && rows["DiasTomEsp"].ToString() != null &&
                                rows["FechaDesEsp"].ToString().Length != 0 && rows["FechaDesEsp"].ToString() != null &&
                                rows["FechaHasEsp"].ToString().Length != 0 && rows["FechaHasEsp"].ToString() != null &&
                                rows["FechaRegEsp"].ToString().Length != 0 && rows["FechaRegEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string TotDiasEsp = rows["TotDiasEsp"].ToString();
                                string DiasPenEsp = rows["DiasPenEsp"].ToString();
                                string DiasTomEsp = rows["DiasTomEsp"].ToString();
                                string FechaDesEsp = rows["FechaDesEsp"].ToString();
                                string FechaHasEsp = rows["FechaHasEsp"].ToString();
                                string FechaRegEsp = rows["FechaRegEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);


                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Mis Solicitudes de Vacaciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    if (database == "SQL")
                                    {
                                        for (int i = 0; i < 16; i++)
                                        {
                                            Keyboard.SendKeys("{DOWN}");
                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{DOWN}");
                                        }
                                    }


                                    string TotDias = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaAcum')]", "Total Días Disponibles", file);
                                    if (TotDias != TotDiasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotDiasEsp + " y el encontrado es: " + TotDias);
                                    }
                                    Thread.Sleep(100);

                                    string DiasPen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaPend')]", "Dias Pendientes", file);
                                    if (DiasPen != DiasPenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasPenEsp + " y el encontrado es: " + DiasPen);
                                    }
                                    Thread.Sleep(100);

                                    string DiasTom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaTomt')]", "Dias a Tomar", file);
                                    if (DiasTom != DiasTomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasTomEsp + " y el encontrado es: " + DiasTom);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDes = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis1_lblFecha')]", "Fecha Desde", file);
                                    if (FechaDes != FechaDesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDesEsp + " y el encontrado es: " + FechaDes);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis2_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaHas != FechaHasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHasEsp + " y el encontrado es: " + FechaHas);
                                    }
                                    Thread.Sleep(100);

                                    string FechaReg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRegr_lblFecha')]", "Fecha de Regreso", file);
                                    if (FechaReg != FechaRegEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRegEsp + " y el encontrado es: " + FechaReg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    if (database == "SQL")
                                    {
                                        for (int i = 0; i < 16; i++)
                                        {
                                            Keyboard.SendKeys("{UP}");
                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{UP}");
                                        }
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_KEcRecuewNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_KEcRecuewNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdEsp"].ToString().Length != 0 && rows["IdEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["AreaEsp"].ToString().Length != 0 && rows["AreaEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["TipoEsp"].ToString().Length != 0 && rows["TipoEsp"].ToString() != null &&
                                rows["EntidadEsp"].ToString().Length != 0 && rows["EntidadEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["PrioriEsp"].ToString().Length != 0 && rows["PrioriEsp"].ToString() != null &&
                                rows["ValorCurEsp"].ToString().Length != 0 && rows["ValorCurEsp"].ToString() != null &&
                                rows["ValorMoneEsp"].ToString().Length != 0 && rows["ValorMoneEsp"].ToString() != null &&
                                rows["MonedasEsp"].ToString().Length != 0 && rows["MonedasEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdEsp = rows["IdEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string AreaEsp = rows["AreaEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string TipoEsp = rows["TipoEsp"].ToString();
                                string EntidadEsp = rows["EntidadEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string PrioriEsp = rows["PrioriEsp"].ToString();
                                string ValorCurEsp = rows["ValorCurEsp"].ToString();
                                string ValorMoneEsp = rows["ValorMoneEsp"].ToString();
                                string MonedasEsp = rows["MonedasEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Solicitudes de Cursos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Id = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Identificación", file);
                                    if (Id != IdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdEsp + " y el encontrado es: " + Id);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string Area = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Area", file);
                                    if (Area != AreaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaEsp + " y el encontrado es: " + Area);
                                    }
                                    Thread.Sleep(100);

                                    string Curso = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]", "Curso", file);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    string FechaSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_fec_radi_lblFecha')]", "Fecha de Solicitud", file);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    string Tipo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]", "Tipo", file);
                                    if (Tipo != TipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEsp + " y el encontrado es: " + Tipo);
                                    }
                                    Thread.Sleep(100);

                                    string Entidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]", "Entidad", file);
                                    if (Entidad != EntidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EntidadEsp + " y el encontrado es: " + Entidad);
                                    }
                                    Thread.Sleep(100);

                                    string Estado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]", "Estado", file);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");

                                    selenium.Scroll("//span[contains(@id,'ctl00_ContenidoPagina_Label8')]");

                                    string Priori = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label8')]", "Prioridad", file);
                                    if (Priori != PrioriEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrioriEsp + " y el encontrado es: " + Priori);
                                    }
                                    Thread.Sleep(100);

                                    string ValorCur = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label10')]", "Valor Curso", file);
                                    if (ValorCur != ValorCurEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorCurEsp + " y el encontrado es: " + ValorCur);
                                    }
                                    Thread.Sleep(100);

                                    string ValorMone = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label11')]", "Valor Otras Monedas", file);
                                    if (ValorMone != ValorMoneEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorMoneEsp + " y el encontrado es: " + ValorMone);
                                    }
                                    Thread.Sleep(100);

                                    string Monedas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label12')]", "Monedas", file);
                                    if (Monedas != MonedasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MonedasEsp + " y el encontrado es: " + Monedas);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");

                                    selenium.Scroll("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");

                                    /////////// Validación TABS ////////

                                    selenium.ValTabs(file);


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteProcDianNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ReporteProcDianNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ProcesoEsp"].ToString().Length != 0 && rows["ProcesoEsp"].ToString() != null &&
                                rows["SubProEsp"].ToString().Length != 0 && rows["SubProEsp"].ToString() != null &&
                                rows["ActividadEsp"].ToString().Length != 0 && rows["ActividadEsp"].ToString() != null &&
                                rows["TipoEsp"].ToString().Length != 0 && rows["TipoEsp"].ToString() != null &&
                                rows["GeneroEsp"].ToString().Length != 0 && rows["GeneroEsp"].ToString() != null &&
                                rows["TipoVinEsp"].ToString().Length != 0 && rows["TipoVinEsp"].ToString() != null &&
                                rows["EstaCargEsp"].ToString().Length != 0 && rows["EstaCargEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["FechaIni2Esp"].ToString().Length != 0 && rows["FechaIni2Esp"].ToString() != null &&
                                rows["FechaFin2Esp"].ToString().Length != 0 && rows["FechaFin2Esp"].ToString() != null &&
                                rows["FechaIni3Esp"].ToString().Length != 0 && rows["FechaIni3Esp"].ToString() != null &&
                                rows["FechaFin3Esp"].ToString().Length != 0 && rows["FechaFin3Esp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["RolEsp"].ToString().Length != 0 && rows["RolEsp"].ToString() != null &&
                                rows["OrdenEsp"].ToString().Length != 0 && rows["OrdenEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ProcesoEsp = rows["ProcesoEsp"].ToString();
                                string SubProEsp = rows["SubProEsp"].ToString();
                                string ActividadEsp = rows["ActividadEsp"].ToString();
                                string TipoEsp = rows["TipoEsp"].ToString();
                                string GeneroEsp = rows["GeneroEsp"].ToString();
                                string TipoVinEsp = rows["TipoVinEsp"].ToString();
                                string EstaCargEsp = rows["EstaCargEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string FechaIni2Esp = rows["FechaIni2Esp"].ToString();
                                string FechaFin2Esp = rows["FechaFin2Esp"].ToString();
                                string FechaIni3Esp = rows["FechaIni3Esp"].ToString();
                                string FechaFin3Esp = rows["FechaFin3Esp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string RolEsp = rows["RolEsp"].ToString();
                                string OrdenEsp = rows["OrdenEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Reporte Procesos", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    string Proceso = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl3')]", "Proceso", file);
                                    if (Proceso != ProcesoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProcesoEsp + " y el encontrado es: " + Proceso);
                                    }
                                    Thread.Sleep(100);

                                    string SubPro = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSProc')]", "Sub Proceso", file);
                                    if (SubPro != SubProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SubProEsp + " y el encontrado es: " + SubPro);
                                    }
                                    Thread.Sleep(100);

                                    string Actividad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodActi')]", "Actividad", file);
                                    if (Actividad != ActividadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ActividadEsp + " y el encontrado es: " + Actividad);
                                    }
                                    Thread.Sleep(100);

                                    string Tipo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblModa0')]", "Tipo", file);
                                    if (Tipo != TipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEsp + " y el encontrado es: " + Tipo);
                                    }
                                    Thread.Sleep(100);

                                    string Genero = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSexEmpl')]", "Genero", file);
                                    if (Genero != GeneroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GeneroEsp + " y el encontrado es: " + Genero);
                                    }
                                    Thread.Sleep(100);

                                    string TipoVin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipVinc')]", "Tipo Vinculación", file);
                                    if (TipoVin != TipoVinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoVinEsp + " y el encontrado es: " + TipoVin);
                                    }
                                    Thread.Sleep(100);

                                    string EstaCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSexEmpl1')]", "Estado Cargo", file);
                                    if (EstaCarg != EstaCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaCargEsp + " y el encontrado es: " + EstaCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIniNac_lblFecha')]", "Fecha Inicial", file);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFinNac_lblFecha')]", "Fecha Final", file);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIniIng_lblFecha')]", "Fecha Inicial 2", file);
                                    if (FechaIni2 != FechaIni2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIni2Esp + " y el encontrado es: " + FechaIni2);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFinIng_lblFecha')]", "Fecha Final 2", file);
                                    if (FechaFin2 != FechaFin2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFin2Esp + " y el encontrado es: " + FechaFin2);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni3 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIniCont_lblFecha')]", "Fecha Inicial 3", file);
                                    if (FechaIni3 != FechaIni3Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIni3Esp + " y el encontrado es: " + FechaIni3);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin3 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFinCont_lblFecha')]", "Fecha Final 3", file);
                                    if (FechaFin3 != FechaFin3Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFin3Esp + " y el encontrado es: " + FechaFin3);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string Rol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodRol')]", "Rol", file);
                                    if (Rol != RolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RolEsp + " y el encontrado es: " + Rol);
                                    }
                                    Thread.Sleep(100);

                                    string Orden = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblOrden')]", "Orden", file);
                                    if (Orden != OrdenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + OrdenEsp + " y el encontrado es: " + Orden);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ResumenAnticipoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ResumenAnticipoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumeroSolEsp"].ToString().Length != 0 && rows["NumeroSolEsp"].ToString() != null &&
                                rows["EstaActualEsp"].ToString().Length != 0 && rows["EstaActualEsp"].ToString() != null &&
                                rows["PerActualEsp"].ToString().Length != 0 && rows["PerActualEsp"].ToString() != null &&
                                rows["FechaAcEsp"].ToString().Length != 0 && rows["FechaAcEsp"].ToString() != null &&
                                rows["NomSolEsp"].ToString().Length != 0 && rows["NomSolEsp"].ToString() != null &&
                                rows["IdSolEsp"].ToString().Length != 0 && rows["IdSolEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["EnviarCoEsp"].ToString().Length != 0 && rows["EnviarCoEsp"].ToString() != null &&
                                rows["ParaEsp"].ToString().Length != 0 && rows["ParaEsp"].ToString() != null &&
                                rows["CcEsp"].ToString().Length != 0 && rows["CcEsp"].ToString() != null &&
                                rows["AsuntoEsp"].ToString().Length != 0 && rows["AsuntoEsp"].ToString() != null &&
                                rows["CuerpoMenEsp"].ToString().Length != 0 && rows["CuerpoMenEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumeroSolEsp = rows["NumeroSolEsp"].ToString();
                                string EstaActualEsp = rows["EstaActualEsp"].ToString();
                                string PerActualEsp = rows["PerActualEsp"].ToString();
                                string FechaAcEsp = rows["FechaAcEsp"].ToString();
                                string NomSolEsp = rows["NomSolEsp"].ToString();
                                string IdSolEsp = rows["IdSolEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string EnviarCoEsp = rows["EnviarCoEsp"].ToString();
                                string ParaEsp = rows["ParaEsp"].ToString();
                                string CcEsp = rows["CcEsp"].ToString();
                                string AsuntoEsp = rows["AsuntoEsp"].ToString();
                                string CuerpoMenEsp = rows["CuerpoMenEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Resumen de la Solicitud Aprobada", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NumeroSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSoli')]", "N. de Solicitud", file);
                                    if (NumeroSol != NumeroSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumeroSolEsp + " y el encontrado es: " + NumeroSol);
                                    }
                                    Thread.Sleep(100);

                                    string EstaActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEsta')]", "Estado Actualizado", file);
                                    if (EstaActual != EstaActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaActualEsp + " y el encontrado es: " + EstaActual);
                                    }
                                    Thread.Sleep(100);

                                    string PerActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomResp')]", "Persona que Actualiza", file);
                                    if (PerActual != PerActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerActualEsp + " y el encontrado es: " + PerActual);
                                    }
                                    Thread.Sleep(100);

                                    string FechaAc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecModi')]", "Fecha de Actualización", file);
                                    if (FechaAc != FechaAcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAcEsp + " y el encontrado es: " + FechaAc);
                                    }
                                    Thread.Sleep(100);

                                    string NomSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre Solicitante", file);
                                    if (NomSol != NomSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSolEsp + " y el encontrado es: " + NomSol);
                                    }
                                    Thread.Sleep(100);

                                    string IdSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación Solicitante", file);
                                    if (IdSol != IdSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdSolEsp + " y el encontrado es: " + IdSol);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]", "Cargo Solicitante", file);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    string EnviarCo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTitInfo')]", "Enviar Correo a los Siguientes Destinatarios", file);
                                    if (EnviarCo != EnviarCoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EnviarCoEsp + " y el encontrado es: " + EnviarCo);
                                    }
                                    Thread.Sleep(100);

                                    string Para = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiPara')]", "Para", file);
                                    if (Para != ParaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParaEsp + " y el encontrado es: " + Para);
                                    }
                                    Thread.Sleep(100);

                                    string Cc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiCopi')]", "CC", file);
                                    if (Cc != CcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CcEsp + " y el encontrado es: " + Cc);
                                    }
                                    Thread.Sleep(100);

                                    string Asunto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAsuMail')]", "Asunto", file);
                                    if (Asunto != AsuntoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsuntoEsp + " y el encontrado es: " + Asunto);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string CuerpoMen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtMAIL_BOD_lblTexto')]", "Cuerpo del Mensaje", file);
                                    if (CuerpoMen != CuerpoMenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CuerpoMenEsp + " y el encontrado es: " + CuerpoMen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ResumenRechazoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ResumenRechazoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumeroSolEsp"].ToString().Length != 0 && rows["NumeroSolEsp"].ToString() != null &&
                                rows["EstaActualEsp"].ToString().Length != 0 && rows["EstaActualEsp"].ToString() != null &&
                                rows["PerActualEsp"].ToString().Length != 0 && rows["PerActualEsp"].ToString() != null &&
                                rows["FechaAcEsp"].ToString().Length != 0 && rows["FechaAcEsp"].ToString() != null &&
                                rows["NomSolEsp"].ToString().Length != 0 && rows["NomSolEsp"].ToString() != null &&
                                rows["IdSolEsp"].ToString().Length != 0 && rows["IdSolEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["EnviarCoEsp"].ToString().Length != 0 && rows["EnviarCoEsp"].ToString() != null &&
                                rows["ParaEsp"].ToString().Length != 0 && rows["ParaEsp"].ToString() != null &&
                                rows["CcEsp"].ToString().Length != 0 && rows["CcEsp"].ToString() != null &&
                                rows["AsuntoEsp"].ToString().Length != 0 && rows["AsuntoEsp"].ToString() != null &&
                                rows["CuerpoMenEsp"].ToString().Length != 0 && rows["CuerpoMenEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumeroSolEsp = rows["NumeroSolEsp"].ToString();
                                string EstaActualEsp = rows["EstaActualEsp"].ToString();
                                string PerActualEsp = rows["PerActualEsp"].ToString();
                                string FechaAcEsp = rows["FechaAcEsp"].ToString();
                                string NomSolEsp = rows["NomSolEsp"].ToString();
                                string IdSolEsp = rows["IdSolEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string EnviarCoEsp = rows["EnviarCoEsp"].ToString();
                                string ParaEsp = rows["ParaEsp"].ToString();
                                string CcEsp = rows["CcEsp"].ToString();
                                string AsuntoEsp = rows["AsuntoEsp"].ToString();
                                string CuerpoMenEsp = rows["CuerpoMenEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Resumen de la Solicitud Aprobada", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NumeroSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSoli')]", "N. de Solicitud", file);
                                    if (NumeroSol != NumeroSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumeroSolEsp + " y el encontrado es: " + NumeroSol);
                                    }
                                    Thread.Sleep(100);

                                    string EstaActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEsta')]", "Estado Actualizado", file);
                                    if (EstaActual != EstaActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaActualEsp + " y el encontrado es: " + EstaActual);
                                    }
                                    Thread.Sleep(100);

                                    string PerActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomResp')]", "Persona que Actualiza", file);
                                    if (PerActual != PerActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerActualEsp + " y el encontrado es: " + PerActual);
                                    }
                                    Thread.Sleep(100);

                                    string FechaAc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecModi')]", "Fecha de Actualización", file);
                                    if (FechaAc != FechaAcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAcEsp + " y el encontrado es: " + FechaAc);
                                    }
                                    Thread.Sleep(100);

                                    string NomSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre Solicitante", file);
                                    if (NomSol != NomSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSolEsp + " y el encontrado es: " + NomSol);
                                    }
                                    Thread.Sleep(100);

                                    string IdSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación Solicitante", file);
                                    if (IdSol != IdSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdSolEsp + " y el encontrado es: " + IdSol);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]", "Cargo Solicitante", file);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCcos')]", "Centro de Costo", file);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    string EnviarCo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTitInfo')]", "Enviar Correo a los Siguientes Destinatarios", file);
                                    if (EnviarCo != EnviarCoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EnviarCoEsp + " y el encontrado es: " + EnviarCo);
                                    }
                                    Thread.Sleep(100);

                                    string Para = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiPara')]", "Para", file);
                                    if (Para != ParaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParaEsp + " y el encontrado es: " + Para);
                                    }
                                    Thread.Sleep(100);

                                    string Cc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiCopi')]", "CC", file);
                                    if (Cc != CcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CcEsp + " y el encontrado es: " + Cc);
                                    }
                                    Thread.Sleep(100);

                                    string Asunto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAsuMail')]", "Asunto", file);
                                    if (Asunto != AsuntoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsuntoEsp + " y el encontrado es: " + Asunto);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string CuerpoMen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtMAIL_BOD_lblTexto')]", "Cuerpo del Mensaje", file);
                                    if (CuerpoMen != CuerpoMenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CuerpoMenEsp + " y el encontrado es: " + CuerpoMen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ResumenRechazoCNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ResumenRechazoCNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumeroSolEsp"].ToString().Length != 0 && rows["NumeroSolEsp"].ToString() != null &&
                                rows["EstaActualEsp"].ToString().Length != 0 && rows["EstaActualEsp"].ToString() != null &&
                                rows["PerActualEsp"].ToString().Length != 0 && rows["PerActualEsp"].ToString() != null &&
                                rows["FechaAcEsp"].ToString().Length != 0 && rows["FechaAcEsp"].ToString() != null &&
                                rows["NomSolEsp"].ToString().Length != 0 && rows["NomSolEsp"].ToString() != null &&
                                rows["IdSolEsp"].ToString().Length != 0 && rows["IdSolEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["EnviarCoEsp"].ToString().Length != 0 && rows["EnviarCoEsp"].ToString() != null &&
                                rows["ParaEsp"].ToString().Length != 0 && rows["ParaEsp"].ToString() != null &&
                                rows["CcEsp"].ToString().Length != 0 && rows["CcEsp"].ToString() != null &&
                                rows["AsuntoEsp"].ToString().Length != 0 && rows["AsuntoEsp"].ToString() != null &&
                                rows["CuerpoMenEsp"].ToString().Length != 0 && rows["CuerpoMenEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumeroSolEsp = rows["NumeroSolEsp"].ToString();
                                string EstaActualEsp = rows["EstaActualEsp"].ToString();
                                string PerActualEsp = rows["PerActualEsp"].ToString();
                                string FechaAcEsp = rows["FechaAcEsp"].ToString();
                                string NomSolEsp = rows["NomSolEsp"].ToString();
                                string IdSolEsp = rows["IdSolEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string EnviarCoEsp = rows["EnviarCoEsp"].ToString();
                                string ParaEsp = rows["ParaEsp"].ToString();
                                string CcEsp = rows["CcEsp"].ToString();
                                string AsuntoEsp = rows["AsuntoEsp"].ToString();
                                string CuerpoMenEsp = rows["CuerpoMenEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Cerrar Ventana", true, file);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Resumen de la Solicitud Aprobada", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NumeroSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSoli')]", "N. de Solicitud", file);
                                    if (NumeroSol != NumeroSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumeroSolEsp + " y el encontrado es: " + NumeroSol);
                                    }
                                    Thread.Sleep(100);

                                    string EstaActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEsta')]", "Estado Actualizado", file);
                                    if (EstaActual != EstaActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaActualEsp + " y el encontrado es: " + EstaActual);
                                    }
                                    Thread.Sleep(100);

                                    string PerActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomResp')]", "Persona que Actualiza", file);
                                    if (PerActual != PerActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerActualEsp + " y el encontrado es: " + PerActual);
                                    }
                                    Thread.Sleep(100);

                                    string FechaAc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecModi')]", "Fecha de Actualización", file);
                                    if (FechaAc != FechaAcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAcEsp + " y el encontrado es: " + FechaAc);
                                    }
                                    Thread.Sleep(100);

                                    string NomSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre Solicitante", file);
                                    if (NomSol != NomSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSolEsp + " y el encontrado es: " + NomSol);
                                    }
                                    Thread.Sleep(100);

                                    string IdSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación Solicitante", file);
                                    if (IdSol != IdSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdSolEsp + " y el encontrado es: " + IdSol);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]", "Cargo Solicitante", file);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    string EnviarCo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTitInfo')]", "Enviar Correo a los Siguientes Destinatarios", file);
                                    if (EnviarCo != EnviarCoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EnviarCoEsp + " y el encontrado es: " + EnviarCo);
                                    }
                                    Thread.Sleep(100);

                                    string Para = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiPara')]", "Para", file);
                                    if (Para != ParaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParaEsp + " y el encontrado es: " + Para);
                                    }
                                    Thread.Sleep(100);

                                    string Cc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiCopi')]", "CC", file);
                                    if (Cc != CcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CcEsp + " y el encontrado es: " + Cc);
                                    }
                                    Thread.Sleep(100);

                                    string Asunto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAsuMail')]", "Asunto", file);
                                    if (Asunto != AsuntoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsuntoEsp + " y el encontrado es: " + Asunto);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string CuerpoMen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtMAIL_BOD_lblTexto')]", "Cuerpo del Mensaje", file);
                                    if (CuerpoMen != CuerpoMenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CuerpoMenEsp + " y el encontrado es: " + CuerpoMen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 3; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ResumenSolicitud()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_ResumenSolicitud")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumeroSolEsp"].ToString().Length != 0 && rows["NumeroSolEsp"].ToString() != null &&
                                rows["EstaActualEsp"].ToString().Length != 0 && rows["EstaActualEsp"].ToString() != null &&
                                rows["PerActualEsp"].ToString().Length != 0 && rows["PerActualEsp"].ToString() != null &&
                                rows["FechaAcEsp"].ToString().Length != 0 && rows["FechaAcEsp"].ToString() != null &&
                                rows["NomSolEsp"].ToString().Length != 0 && rows["NomSolEsp"].ToString() != null &&
                                rows["IdSolEsp"].ToString().Length != 0 && rows["IdSolEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["EnviarCoEsp"].ToString().Length != 0 && rows["EnviarCoEsp"].ToString() != null &&
                                rows["ParaEsp"].ToString().Length != 0 && rows["ParaEsp"].ToString() != null &&
                                rows["CcEsp"].ToString().Length != 0 && rows["CcEsp"].ToString() != null &&
                                rows["AsuntoEsp"].ToString().Length != 0 && rows["AsuntoEsp"].ToString() != null &&
                                rows["CuerpoMenEsp"].ToString().Length != 0 && rows["CuerpoMenEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumeroSolEsp = rows["NumeroSolEsp"].ToString();
                                string EstaActualEsp = rows["EstaActualEsp"].ToString();
                                string PerActualEsp = rows["PerActualEsp"].ToString();
                                string FechaAcEsp = rows["FechaAcEsp"].ToString();
                                string NomSolEsp = rows["NomSolEsp"].ToString();
                                string IdSolEsp = rows["IdSolEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string EnviarCoEsp = rows["EnviarCoEsp"].ToString();
                                string ParaEsp = rows["ParaEsp"].ToString();
                                string CcEsp = rows["CcEsp"].ToString();
                                string AsuntoEsp = rows["AsuntoEsp"].ToString();
                                string CuerpoMenEsp = rows["CuerpoMenEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Resumen de la Solicitud Aprobada", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NumeroSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSoli')]", "N. de Solicitud", file);
                                    if (NumeroSol != NumeroSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumeroSolEsp + " y el encontrado es: " + NumeroSol);
                                    }
                                    Thread.Sleep(100);

                                    string EstaActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEsta')]", "Estado Actualizado", file);
                                    if (EstaActual != EstaActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaActualEsp + " y el encontrado es: " + EstaActual);
                                    }
                                    Thread.Sleep(100);

                                    string PerActual = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomResp')]", "Persona que Actualiza", file);
                                    if (PerActual != PerActualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerActualEsp + " y el encontrado es: " + PerActual);
                                    }
                                    Thread.Sleep(100);

                                    string FechaAc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecModi')]", "Fecha de Actualización", file);
                                    if (FechaAc != FechaAcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAcEsp + " y el encontrado es: " + FechaAc);
                                    }
                                    Thread.Sleep(100);

                                    string NomSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre Solicitante", file);
                                    if (NomSol != NomSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSolEsp + " y el encontrado es: " + NomSol);
                                    }
                                    Thread.Sleep(100);

                                    string IdSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación Solicitante", file);
                                    if (IdSol != IdSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdSolEsp + " y el encontrado es: " + IdSol);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]", "Cargo Solicitante", file);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCcos')]", "Centro de Costo", file);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    string EnviarCo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTitInfo')]", "Enviar Correo a los Siguientes Destinatarios", file);
                                    if (EnviarCo != EnviarCoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EnviarCoEsp + " y el encontrado es: " + EnviarCo);
                                    }
                                    Thread.Sleep(100);

                                    string Para = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiPara')]", "Para", file);
                                    if (Para != ParaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParaEsp + " y el encontrado es: " + Para);
                                    }
                                    Thread.Sleep(100);

                                    string Cc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaiCopi')]", "CC", file);
                                    if (Cc != CcEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CcEsp + " y el encontrado es: " + Cc);
                                    }
                                    Thread.Sleep(100);

                                    string Asunto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAsuMail')]", "Asunto", file);
                                    if (Asunto != AsuntoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsuntoEsp + " y el encontrado es: " + Asunto);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //for (int i = 0; i < 3; i++)
                                    //{
                                    //    Keyboard.SendKeys("{DOWN}");
                                    //}

                                    //string CuerpoMen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtMAIL_BOD_lblTexto')]", "Cuerpo del Mensaje", file);
                                    //if (CuerpoMen != CuerpoMenEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CuerpoMenEsp + " y el encontrado es: " + CuerpoMen);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //for (int i = 0; i < 3; i++)
                                    //{
                                    //    Keyboard.SendKeys("{UP}");
                                    //}

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SlAppruedNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_SlAppruedNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                rows["url3"].ToString().Length != 0 && rows["url3"].ToString() != null &&
                                rows["url4"].ToString().Length != 0 && rows["url4"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GenerarEsp"].ToString().Length != 0 && rows["GenerarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdAsEsp"].ToString().Length != 0 && rows["IdAsEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["PruebaCalEsp"].ToString().Length != 0 && rows["PruebaCalEsp"].ToString() != null &&
                                rows["DesPruEsp"].ToString().Length != 0 && rows["DesPruEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                string url3 = rows["url3"].ToString();
                                string url4 = rows["url4"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GenerarEsp = rows["GenerarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdAsEsp = rows["IdAsEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string PruebaCalEsp = rows["PruebaCalEsp"].ToString();
                                string DesPruEsp = rows["DesPruEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);



                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    ChromeDriver driver1 = selenium.returnDriver();
                                    driver1.Navigate().GoToUrl(url3);
                                    Thread.Sleep(2000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url4);
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Calificación de Pruebas", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Retornar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Generar
                                    string Generar = selenium.EmergenteBotones("ctl00_btnGenerar");
                                    Thread.Sleep(100);
                                    if (Generar != GenerarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GenerarEsp + " y el encontrado es: " + Generar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string IdAs = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodAspi')]", "Identificación del Aspirante", file);
                                    if (IdAs != IdAsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdAsEsp + " y el encontrado es: " + IdAs);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomAspi')]", "Nombres Apellidos", file);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string PruebaCal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblPruCali')]", "Prueba a Calificar", file);
                                    if (PruebaCal != PruebaCalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PruebaCalEsp + " y el encontrado es: " + PruebaCal);
                                    }
                                    Thread.Sleep(100);

                                    string DesPru = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Descripción de la Prueba", file);
                                    if (DesPru != DesPruEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DesPruEsp + " y el encontrado es: " + DesPru);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string Observa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObser_lblTexto')]", "Observaciones", file);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmSoEpacteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmSoEpacteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["NroContrEsp"].ToString().Length != 0 && rows["NroContrEsp"].ToString() != null &&
                                rows["NmbresEsp"].ToString().Length != 0 && rows["NmbresEsp"].ToString() != null &&
                                rows["CodInterEsp"].ToString().Length != 0 && rows["CodInterEsp"].ToString() != null &&
                                rows["EdadEsp"].ToString().Length != 0 && rows["EdadEsp"].ToString() != null &&
                                rows["CenCostoEsp"].ToString().Length != 0 && rows["CenCostoEsp"].ToString() != null &&
                                rows["AntiguedadEsp"].ToString().Length != 0 && rows["AntiguedadEsp"].ToString() != null &&
                                rows["SexoEsp"].ToString().Length != 0 && rows["SexoEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["Entidad1Esp"].ToString().Length != 0 && rows["Entidad1Esp"].ToString() != null &&
                                rows["NomEnti1Esp"].ToString().Length != 0 && rows["NomEnti1Esp"].ToString() != null &&
                                rows["Sucursal1Esp"].ToString().Length != 0 && rows["Sucursal1Esp"].ToString() != null &&
                                rows["NomSucurEsp"].ToString().Length != 0 && rows["NomSucurEsp"].ToString() != null &&
                                rows["IpsEmpleEsp"].ToString().Length != 0 && rows["IpsEmpleEsp"].ToString() != null &&
                                rows["Entidad2Esp"].ToString().Length != 0 && rows["Entidad2Esp"].ToString() != null &&
                                rows["NomEnti2Esp"].ToString().Length != 0 && rows["NomEnti2Esp"].ToString() != null &&
                                rows["Sucursal2Esp"].ToString().Length != 0 && rows["Sucursal2Esp"].ToString() != null &&
                                rows["NomSucur2Esp"].ToString().Length != 0 && rows["NomSucur2Esp"].ToString() != null &&
                                rows["FechaAtelEsp"].ToString().Length != 0 && rows["FechaAtelEsp"].ToString() != null &&
                                rows["CenTrabajoEsp"].ToString().Length != 0 && rows["CenTrabajoEsp"].ToString() != null &&
                                rows["ParAfectadaEsp"].ToString().Length != 0 && rows["ParAfectadaEsp"].ToString() != null &&
                                rows["AreaRiesgoEsp"].ToString().Length != 0 && rows["AreaRiesgoEsp"].ToString() != null &&
                                rows["AgenLesionEsp"].ToString().Length != 0 && rows["AgenLesionEsp"].ToString() != null &&
                                rows["MecanEsp"].ToString().Length != 0 && rows["MecanEsp"].ToString() != null &&
                                rows["TipoLesEsp"].ToString().Length != 0 && rows["TipoLesEsp"].ToString() != null &&
                                rows["ObservaEsp"].ToString().Length != 0 && rows["ObservaEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string NroContrEsp = rows["NroContrEsp"].ToString();
                                string NmbresEsp = rows["NmbresEsp"].ToString();
                                string CodInterEsp = rows["CodInterEsp"].ToString();
                                string EdadEsp = rows["EdadEsp"].ToString();
                                string CenCostoEsp = rows["CenCostoEsp"].ToString();
                                string AntiguedadEsp = rows["AntiguedadEsp"].ToString();
                                string SexoEsp = rows["SexoEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string Entidad1Esp = rows["Entidad1Esp"].ToString();
                                string NomEnti1Esp = rows["NomEnti1Esp"].ToString();
                                string Sucursal1Esp = rows["Sucursal1Esp"].ToString();
                                string NomSucurEsp = rows["NomSucurEsp"].ToString();
                                string IpsEmpleEsp = rows["IpsEmpleEsp"].ToString();
                                string Entidad2Esp = rows["Entidad2Esp"].ToString();
                                string NomEnti2Esp = rows["NomEnti2Esp"].ToString();
                                string Sucursal2Esp = rows["Sucursal2Esp"].ToString();
                                string NomSucur2Esp = rows["NomSucur2Esp"].ToString();
                                string FechaAtelEsp = rows["FechaAtelEsp"].ToString();
                                string CenTrabajoEsp = rows["CenTrabajoEsp"].ToString();
                                string ParAfectadaEsp = rows["ParAfectadaEsp"].ToString();
                                string AreaRiesgoEsp = rows["AreaRiesgoEsp"].ToString();
                                string AgenLesionEsp = rows["AgenLesionEsp"].ToString();
                                string MecanEsp = rows["MecanEsp"].ToString();
                                string TipoLesEsp = rows["TipoLesEsp"].ToString();
                                string ObservaEsp = rows["ObservaEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);



                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro Atel", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string NroContr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Número de Contrato", file);
                                    if (NroContr != NroContrEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NroContrEsp + " y el encontrado es: " + NroContr);
                                    }
                                    Thread.Sleep(100);

                                    string Nmbres = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Nombres", file);
                                    if (Nmbres != NmbresEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NmbresEsp + " y el encontrado es: " + Nmbres);
                                    }
                                    Thread.Sleep(100);

                                    string CodInter = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]", "Código Interno", file);
                                    if (CodInter != CodInterEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInterEsp + " y el encontrado es: " + CodInter);
                                    }
                                    Thread.Sleep(100);

                                    string Edad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEdad')]", "Edad", file);
                                    if (Edad != EdadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EdadEsp + " y el encontrado es: " + Edad);
                                    }
                                    Thread.Sleep(100);

                                    string CenCosto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCCos')]", "Centro de Costo", file);
                                    if (CenCosto != CenCostoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenCostoEsp + " y el encontrado es: " + CenCosto);
                                    }
                                    Thread.Sleep(100);

                                    string Antiguedad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAntiguedad')]", "Antiguedad", file);
                                    if (Antiguedad != AntiguedadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AntiguedadEsp + " y el encontrado es: " + Antiguedad);
                                    }
                                    Thread.Sleep(100);

                                    string Sexo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSexEmpl')]", "Sexo", file);
                                    if (Sexo != SexoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SexoEsp + " y el encontrado es: " + Sexo);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string Entidad1 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEnti')]", "Entidad 1", file);
                                    if (Entidad1 != Entidad1Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Entidad1Esp + " y el encontrado es: " + Entidad1);
                                    }
                                    Thread.Sleep(100);

                                    string NomEnti1 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]", "Nombre Entidad 1", file);
                                    if (NomEnti1 != NomEnti1Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEnti1Esp + " y el encontrado es: " + NomEnti1);
                                    }
                                    Thread.Sleep(100);

                                    string Sucursal1 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSucu')]", "Sucursal 1", file);
                                    if (Sucursal1 != Sucursal1Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Sucursal1Esp + " y el encontrado es: " + Sucursal1);
                                    }
                                    Thread.Sleep(100);

                                    string NomSucur = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomSucu')]", "Nombre Sucursal", file);
                                    if (NomSucur != NomSucurEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSucurEsp + " y el encontrado es: " + NomSucur);
                                    }
                                    Thread.Sleep(100);

                                    string IpsEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblIpsEmpl')]", "IPS Empleado", file);
                                    if (IpsEmple != IpsEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IpsEmpleEsp + " y el encontrado es: " + IpsEmple);
                                    }
                                    Thread.Sleep(100);

                                    string Entidad2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEntiARP')]", "Entidad 2", file);
                                    if (Entidad2 != Entidad2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Entidad2Esp + " y el encontrado es: " + Entidad2);
                                    }
                                    Thread.Sleep(100);

                                    string NomEnti2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEntiARP')]", "Nombre Entidad 2", file);
                                    if (NomEnti2 != NomEnti2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEnti2Esp + " y el encontrado es: " + NomEnti2);
                                    }
                                    Thread.Sleep(100);

                                    string Sucursal2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodSucuARP')]", "Sucursal 2", file);
                                    if (Sucursal2 != Sucursal2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Sucursal2Esp + " y el encontrado es: " + Sucursal2);
                                    }
                                    Thread.Sleep(100);

                                    string NomSucur2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomSucuARP')]", "Nombre Sucursal 2", file);
                                    if (NomSucur2 != NomSucur2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSucur2Esp + " y el encontrado es: " + NomSucur2);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string FechaAtel = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecAtep')]", "Fecha Atel", file);
                                    if (FechaAtel != FechaAtelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAtelEsp + " y el encontrado es: " + FechaAtel);
                                    }
                                    Thread.Sleep(100);

                                    string CenTrabajo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCenp')]", "Centro de Trabajo", file);
                                    if (CenTrabajo != CenTrabajoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CenTrabajoEsp + " y el encontrado es: " + CenTrabajo);
                                    }
                                    Thread.Sleep(100);

                                    string ParAfectada = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodPartC')]", "Parte Afectada del Cuerpo", file);
                                    if (ParAfectada != ParAfectadaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParAfectadaEsp + " y el encontrado es: " + ParAfectada);
                                    }
                                    Thread.Sleep(100);

                                    string AreaRiesgo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodArea')]", "Area de Riesgo", file);
                                    if (AreaRiesgo != AreaRiesgoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaRiesgoEsp + " y el encontrado es: " + AreaRiesgo);
                                    }
                                    Thread.Sleep(100);

                                    string AgenLesion = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodAgen')]", "Agente Lesión", file);
                                    if (AgenLesion != AgenLesionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AgenLesionEsp + " y el encontrado es: " + AgenLesion);
                                    }
                                    Thread.Sleep(100);

                                    string Mecan = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTipo')]", "Mecanismo o Forma de Accidente", file);
                                    if (Mecan != MecanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MecanEsp + " y el encontrado es: " + Mecan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string TipoLes = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNatu')]", "Tipo Lesión", file);
                                    if (TipoLes != TipoLesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoLesEsp + " y el encontrado es: " + TipoLes);
                                    }
                                    Thread.Sleep(100);

                                    string Observa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblObsNatu')]", "Observaciones", file);
                                    if (Observa != ObservaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservaEsp + " y el encontrado es: " + Observa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 25; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1000);
                                    selenium.Click("//select[contains(@id,'ctl00_ContenidoPagina_ddlNroCont')]");
                                    Thread.Sleep(500);
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        //elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_KEcRcursW()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_KEcRcursW")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["AreaEsp"].ToString().Length != 0 && rows["AreaEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["FechaDesEsp"].ToString().Length != 0 && rows["FechaDesEsp"].ToString() != null &&
                                rows["HoraIniEsp"].ToString().Length != 0 && rows["HoraIniEsp"].ToString() != null &&
                                rows["FechaHasEsp"].ToString().Length != 0 && rows["FechaHasEsp"].ToString() != null &&
                                rows["HoraFinEsp"].ToString().Length != 0 && rows["HoraFinEsp"].ToString() != null &&
                                rows["FechaRequiEsp"].ToString().Length != 0 && rows["FechaRequiEsp"].ToString() != null &&
                                rows["PersonasEsp"].ToString().Length != 0 && rows["PersonasEsp"].ToString() != null &&
                                rows["ResponEsp"].ToString().Length != 0 && rows["ResponEsp"].ToString() != null &&
                                rows["ObservacionesEsp"].ToString().Length != 0 && rows["ObservacionesEsp"].ToString() != null &&
                                rows["ArbolEsp"].ToString().Length != 0 && rows["ArbolEsp"].ToString() != null &&
                                rows["DepenEsp"].ToString().Length != 0 && rows["DepenEsp"].ToString() != null &&
                                rows["PrioridadEsp"].ToString().Length != 0 && rows["PrioridadEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string AreaEsp = rows["AreaEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string FechaDesEsp = rows["FechaDesEsp"].ToString();
                                string HoraIniEsp = rows["HoraIniEsp"].ToString();
                                string FechaHasEsp = rows["FechaHasEsp"].ToString();
                                string HoraFinEsp = rows["HoraFinEsp"].ToString();
                                string FechaRequiEsp = rows["FechaRequiEsp"].ToString();
                                string PersonasEsp = rows["PersonasEsp"].ToString();
                                string ResponEsp = rows["ResponEsp"].ToString();
                                string ObservacionesEsp = rows["ObservacionesEsp"].ToString();
                                string ArbolEsp = rows["ArbolEsp"].ToString();
                                string DepenEsp = rows["DepenEsp"].ToString();
                                string PrioridadEsp = rows["PrioridadEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //if (database == "SQL")
                                    //{
                                    //    selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    //}
                                    //else
                                    //{
                                    //    selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    //}
                                    //Thread.Sleep(2000);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Registro de Solicitudes de Curso", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Area = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Area')]", "Area", file);
                                    if (Area != AreaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaEsp + " y el encontrado es: " + Area);
                                    }
                                    Thread.Sleep(100);

                                    string Curso = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Curso", file);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDes = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDes_lblFecha')]", "Fecha Desde", file);
                                    if (FechaDes != FechaDesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDesEsp + " y el encontrado es: " + FechaDes);
                                    }
                                    Thread.Sleep(100);

                                    string HoraIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label8')]", "Hora de Inicio", file);
                                    if (HoraIni != HoraIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraIniEsp + " y el encontrado es: " + HoraIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecHast_lblFecha')]", "Fecha Hasta", file);
                                    if (FechaHas != FechaHasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHasEsp + " y el encontrado es: " + FechaHas);
                                    }
                                    Thread.Sleep(100);

                                    string HoraFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label9')]", "Hora de Final", file);
                                    if (HoraFin != HoraFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinEsp + " y el encontrado es: " + HoraFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string FechaRequi = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecreqs_lblFecha')]", "Fecha de Requicisión", file);
                                    if (FechaRequi != FechaRequiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRequiEsp + " y el encontrado es: " + FechaRequi);
                                    }
                                    Thread.Sleep(100);

                                    string Personas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label10')]", "Personas", file);
                                    if (Personas != PersonasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PersonasEsp + " y el encontrado es: " + Personas);
                                    }
                                    Thread.Sleep(100);

                                    string Respon = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]", "Responsable", file);
                                    if (Respon != ResponEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ResponEsp + " y el encontrado es: " + Respon);
                                    }
                                    Thread.Sleep(100);

                                    string Observaciones = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Observaciones", file);
                                    if (Observaciones != ObservacionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservacionesEsp + " y el encontrado es: " + Observaciones);
                                    }
                                    Thread.Sleep(100);

                                    string Arbol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]", "Árbol", file);
                                    if (Arbol != ArbolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ArbolEsp + " y el encontrado es: " + Arbol);
                                    }
                                    Thread.Sleep(100);

                                    string Depen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]", "Dependencia", file);
                                    if (Depen != DepenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DepenEsp + " y el encontrado es: " + Depen);
                                    }
                                    Thread.Sleep(100);

                                    string Prioridad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]", "Prioridad", file);
                                    if (Prioridad != PrioridadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrioridadEsp + " y el encontrado es: " + Prioridad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 7; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmRHSLRepSLNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SmartPeople_NTC_1.SmartPeople_frmRHSLRepSLNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["OrigenHvEsp"].ToString().Length != 0 && rows["OrigenHvEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["NomCargEsp"].ToString().Length != 0 && rows["NomCargEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["AreaExpEsp"].ToString().Length != 0 && rows["AreaExpEsp"].ToString() != null &&
                                rows["AnosExpEsp"].ToString().Length != 0 && rows["AnosExpEsp"].ToString() != null &&
                                rows["InstiEsp"].ToString().Length != 0 && rows["InstiEsp"].ToString() != null &&
                                rows["EducaEsp"].ToString().Length != 0 && rows["EducaEsp"].ToString() != null &&
                                rows["PalClaveEsp"].ToString().Length != 0 && rows["PalClaveEsp"].ToString() != null &&
                                rows["ProyectoEsp"].ToString().Length != 0 && rows["ProyectoEsp"].ToString() != null &&
                                rows["EduNoForEsp"].ToString().Length != 0 && rows["EduNoForEsp"].ToString() != null &&
                                rows["TiemEstEsp"].ToString().Length != 0 && rows["TiemEstEsp"].ToString() != null &&
                                rows["AreaIntEsp"].ToString().Length != 0 && rows["AreaIntEsp"].ToString() != null &&
                                rows["GeneroEsp"].ToString().Length != 0 && rows["GeneroEsp"].ToString() != null &&
                                rows["AspSalEsp"].ToString().Length != 0 && rows["AspSalEsp"].ToString() != null &&
                                rows["IdiomaEsp"].ToString().Length != 0 && rows["IdiomaEsp"].ToString() != null &&
                                rows["TraInvesEsp"].ToString().Length != 0 && rows["TraInvesEsp"].ToString() != null &&
                                rows["PublicaEsp"].ToString().Length != 0 && rows["PublicaEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string OrigenHvEsp = rows["OrigenHvEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string NomCargEsp = rows["NomCargEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string AreaExpEsp = rows["AreaExpEsp"].ToString();
                                string AnosExpEsp = rows["AnosExpEsp"].ToString();
                                string InstiEsp = rows["InstiEsp"].ToString();
                                string EducaEsp = rows["EducaEsp"].ToString();
                                string PalClaveEsp = rows["PalClaveEsp"].ToString();
                                string ProyectoEsp = rows["ProyectoEsp"].ToString();
                                string EduNoForEsp = rows["EduNoForEsp"].ToString();
                                string TiemEstEsp = rows["TiemEstEsp"].ToString();
                                string AreaIntEsp = rows["AreaIntEsp"].ToString();
                                string GeneroEsp = rows["GeneroEsp"].ToString();
                                string AspSalEsp = rows["AspSalEsp"].ToString();
                                string IdiomaEsp = rows["IdiomaEsp"].ToString();
                                string TraInvesEsp = rows["TraInvesEsp"].ToString();
                                string PublicaEsp = rows["PublicaEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(2000);

                                    selenium.Screenshot("Listado de Hojas de Vida", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    string Empresa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    string OrigenHv = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblOrigen')]", "Origen Hojas de Vida", file);
                                    if (OrigenHv != OrigenHvEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + OrigenHvEsp + " y el encontrado es: " + OrigenHv);
                                    }
                                    Thread.Sleep(100);

                                    /*string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]", "Consultar Código Cargo", file);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    string NomCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCargo')]", "Consultar Nombre Cargo", file);
                                    if (NomCarg != NomCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomCargEsp + " y el encontrado es: " + NomCarg);
                                    }
                                    Thread.Sleep(100);*/

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCar')]", "Cargo", file);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string AreaExp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAreaExp')]", "Área de Experiencia", file);
                                    if (AreaExp != AreaExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaExpEsp + " y el encontrado es: " + AreaExp);
                                    }
                                    Thread.Sleep(100);

                                    string AnosExp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAnosExp')]", "Años de Experiencia", file);
                                    if (AnosExp != AnosExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AnosExpEsp + " y el encontrado es: " + AnosExp);
                                    }
                                    Thread.Sleep(100);

                                    string Insti = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblInstituciones')]", "Institución", file);
                                    if (Insti != InstiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InstiEsp + " y el encontrado es: " + Insti);
                                    }
                                    Thread.Sleep(100);

                                    string Educa = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEducacion')]", "Educación", file);
                                    if (Educa != EducaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EducaEsp + " y el encontrado es: " + Educa);
                                    }
                                    Thread.Sleep(100);

                                    string PalClave = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblPalabraCla')]", "Palabra Clave", file);
                                    if (PalClave != PalClaveEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PalClaveEsp + " y el encontrado es: " + PalClave);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{DOWN}");
                                    }

                                    string Proyecto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblProyecto')]", "Proyecto", file);
                                    if (Proyecto != ProyectoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProyectoEsp + " y el encontrado es: " + Proyecto);
                                    }
                                    Thread.Sleep(100);

                                    string EduNoFor = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEducNoFormal')]", "Educación no Formal", file);
                                    if (EduNoFor != EduNoForEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EduNoForEsp + " y el encontrado es: " + EduNoFor);
                                    }
                                    Thread.Sleep(100);

                                    string TiemEst = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblHorasCapa')]", "Tiempo de Estudio", file);
                                    if (TiemEst != TiemEstEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TiemEstEsp + " y el encontrado es: " + TiemEst);
                                    }
                                    Thread.Sleep(100);

                                    string AreaInt = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAreaInte')]", "Área de Interés", file);
                                    if (AreaInt != AreaIntEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AreaIntEsp + " y el encontrado es: " + AreaInt);
                                    }
                                    Thread.Sleep(100);

                                    string Genero = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblGenero')]", "Género", file);
                                    if (Genero != GeneroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GeneroEsp + " y el encontrado es: " + Genero);
                                    }
                                    Thread.Sleep(100);

                                    string AspSal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAspSalarial')]", "Aspiración Salarial", file);
                                    if (AspSal != AspSalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AspSalEsp + " y el encontrado es: " + AspSal);
                                    }
                                    Thread.Sleep(100);

                                    string Idioma = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblIdioma')]", "Idioma", file);
                                    if (Idioma != IdiomaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdiomaEsp + " y el encontrado es: " + Idioma);
                                    }
                                    Thread.Sleep(100);

                                    string TraInves = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTrayectoria')]", "Trayectoria Investigativa", file);
                                    if (TraInves != TraInvesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TraInvesEsp + " y el encontrado es: " + TraInves);
                                    }
                                    Thread.Sleep(100);

                                    string Publica = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblPublicacion')]", "Publicaciones", file);
                                    if (Publica != PublicaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PublicaEsp + " y el encontrado es: " + Publica);
                                    }
                                    Thread.Sleep(100);

                                    string Ciudad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_lblDivPoli')]", "Ciudad", file);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        Keyboard.SendKeys("{UP}");
                                    }

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    if (elementListPagina2.Count > 0)
                                    {
                                        foreach (IWebElement pageEle in elementListPagina2)
                                        {
                                            if (pageEle.TagName == "span" && pageEle.Displayed && pageEle.GetAttribute("Class") == "rfv")
                                            {
                                                String campo = pageEle.GetAttribute("id");
                                                errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + campo + " es requerido");
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        #region Atributos de prueba adicionales

        // Puede usar los siguientes atributos adicionales conforme escribe las pruebas:

        ////Use TestInitialize para ejecutar el código antes de ejecutar cada prueba 
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{        
        //    // Para generar código para esta prueba, seleccione "Generar código para prueba automatizada de IU" en el menú contextual y seleccione uno de los elementos de menú.
        //}

        ////Use TestCleanup para ejecutar el código después de ejecutar cada prueba
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{        
        //    // Para generar código para esta prueba, seleccione "Generar código para prueba automatizada de IU" en el menú contextual y seleccione uno de los elementos de menú.
        //}

        #endregion

        /// <summary>
        ///Obtiene o establece el contexto de las pruebas que proporciona
        ///información y funcionalidad para la serie de pruebas actual.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        private TestContext testContextInstance;

        public UIMap UIMap
        {
            get
            {
                if (this.map == null)
                {
                    this.map = new UIMap();
                }

                return this.map;
            }
        }

        private UIMap map;
    }
}
